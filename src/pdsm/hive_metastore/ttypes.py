#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:dynamic,slots
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
from thrift.protocol.TBase import TBase, TFrozenBase, TExceptionBase, TTransport
all_structs = []


class HiveObjectType(TBase):
    GLOBAL = 1
    DATABASE = 2
    TABLE = 3
    PARTITION = 4
    COLUMN = 5

    _VALUES_TO_NAMES = {
        1: "GLOBAL",
        2: "DATABASE",
        3: "TABLE",
        4: "PARTITION",
        5: "COLUMN",
    }

    _NAMES_TO_VALUES = {
        "GLOBAL": 1,
        "DATABASE": 2,
        "TABLE": 3,
        "PARTITION": 4,
        "COLUMN": 5,
    }


class PrincipalType(TBase):
    USER = 1
    ROLE = 2
    GROUP = 3

    _VALUES_TO_NAMES = {
        1: "USER",
        2: "ROLE",
        3: "GROUP",
    }

    _NAMES_TO_VALUES = {
        "USER": 1,
        "ROLE": 2,
        "GROUP": 3,
    }


class PartitionEventType(TBase):
    LOAD_DONE = 1

    _VALUES_TO_NAMES = {
        1: "LOAD_DONE",
    }

    _NAMES_TO_VALUES = {
        "LOAD_DONE": 1,
    }


class TxnState(TBase):
    COMMITTED = 1
    ABORTED = 2
    OPEN = 3

    _VALUES_TO_NAMES = {
        1: "COMMITTED",
        2: "ABORTED",
        3: "OPEN",
    }

    _NAMES_TO_VALUES = {
        "COMMITTED": 1,
        "ABORTED": 2,
        "OPEN": 3,
    }


class LockLevel(TBase):
    DB = 1
    TABLE = 2
    PARTITION = 3

    _VALUES_TO_NAMES = {
        1: "DB",
        2: "TABLE",
        3: "PARTITION",
    }

    _NAMES_TO_VALUES = {
        "DB": 1,
        "TABLE": 2,
        "PARTITION": 3,
    }


class LockState(TBase):
    ACQUIRED = 1
    WAITING = 2
    ABORT = 3
    NOT_ACQUIRED = 4

    _VALUES_TO_NAMES = {
        1: "ACQUIRED",
        2: "WAITING",
        3: "ABORT",
        4: "NOT_ACQUIRED",
    }

    _NAMES_TO_VALUES = {
        "ACQUIRED": 1,
        "WAITING": 2,
        "ABORT": 3,
        "NOT_ACQUIRED": 4,
    }


class LockType(TBase):
    SHARED_READ = 1
    SHARED_WRITE = 2
    EXCLUSIVE = 3

    _VALUES_TO_NAMES = {
        1: "SHARED_READ",
        2: "SHARED_WRITE",
        3: "EXCLUSIVE",
    }

    _NAMES_TO_VALUES = {
        "SHARED_READ": 1,
        "SHARED_WRITE": 2,
        "EXCLUSIVE": 3,
    }


class CompactionType(TBase):
    MINOR = 1
    MAJOR = 2

    _VALUES_TO_NAMES = {
        1: "MINOR",
        2: "MAJOR",
    }

    _NAMES_TO_VALUES = {
        "MINOR": 1,
        "MAJOR": 2,
    }


class GrantRevokeType(TBase):
    GRANT = 1
    REVOKE = 2

    _VALUES_TO_NAMES = {
        1: "GRANT",
        2: "REVOKE",
    }

    _NAMES_TO_VALUES = {
        "GRANT": 1,
        "REVOKE": 2,
    }


class DataOperationType(TBase):
    SELECT = 1
    INSERT = 2
    UPDATE = 3
    DELETE = 4
    UNSET = 5
    NO_TXN = 6

    _VALUES_TO_NAMES = {
        1: "SELECT",
        2: "INSERT",
        3: "UPDATE",
        4: "DELETE",
        5: "UNSET",
        6: "NO_TXN",
    }

    _NAMES_TO_VALUES = {
        "SELECT": 1,
        "INSERT": 2,
        "UPDATE": 3,
        "DELETE": 4,
        "UNSET": 5,
        "NO_TXN": 6,
    }


class EventRequestType(TBase):
    INSERT = 1
    UPDATE = 2
    DELETE = 3

    _VALUES_TO_NAMES = {
        1: "INSERT",
        2: "UPDATE",
        3: "DELETE",
    }

    _NAMES_TO_VALUES = {
        "INSERT": 1,
        "UPDATE": 2,
        "DELETE": 3,
    }


class SerdeType(TBase):
    HIVE = 1
    SCHEMA_REGISTRY = 2

    _VALUES_TO_NAMES = {
        1: "HIVE",
        2: "SCHEMA_REGISTRY",
    }

    _NAMES_TO_VALUES = {
        "HIVE": 1,
        "SCHEMA_REGISTRY": 2,
    }


class SchemaType(TBase):
    HIVE = 1
    AVRO = 2

    _VALUES_TO_NAMES = {
        1: "HIVE",
        2: "AVRO",
    }

    _NAMES_TO_VALUES = {
        "HIVE": 1,
        "AVRO": 2,
    }


class SchemaCompatibility(TBase):
    NONE = 1
    BACKWARD = 2
    FORWARD = 3
    BOTH = 4

    _VALUES_TO_NAMES = {
        1: "NONE",
        2: "BACKWARD",
        3: "FORWARD",
        4: "BOTH",
    }

    _NAMES_TO_VALUES = {
        "NONE": 1,
        "BACKWARD": 2,
        "FORWARD": 3,
        "BOTH": 4,
    }


class SchemaValidation(TBase):
    LATEST = 1
    ALL = 2

    _VALUES_TO_NAMES = {
        1: "LATEST",
        2: "ALL",
    }

    _NAMES_TO_VALUES = {
        "LATEST": 1,
        "ALL": 2,
    }


class SchemaVersionState(TBase):
    INITIATED = 1
    START_REVIEW = 2
    CHANGES_REQUIRED = 3
    REVIEWED = 4
    ENABLED = 5
    DISABLED = 6
    ARCHIVED = 7
    DELETED = 8

    _VALUES_TO_NAMES = {
        1: "INITIATED",
        2: "START_REVIEW",
        3: "CHANGES_REQUIRED",
        4: "REVIEWED",
        5: "ENABLED",
        6: "DISABLED",
        7: "ARCHIVED",
        8: "DELETED",
    }

    _NAMES_TO_VALUES = {
        "INITIATED": 1,
        "START_REVIEW": 2,
        "CHANGES_REQUIRED": 3,
        "REVIEWED": 4,
        "ENABLED": 5,
        "DISABLED": 6,
        "ARCHIVED": 7,
        "DELETED": 8,
    }


class FunctionType(TBase):
    JAVA = 1

    _VALUES_TO_NAMES = {
        1: "JAVA",
    }

    _NAMES_TO_VALUES = {
        "JAVA": 1,
    }


class ResourceType(TBase):
    JAR = 1
    FILE = 2
    ARCHIVE = 3

    _VALUES_TO_NAMES = {
        1: "JAR",
        2: "FILE",
        3: "ARCHIVE",
    }

    _NAMES_TO_VALUES = {
        "JAR": 1,
        "FILE": 2,
        "ARCHIVE": 3,
    }


class FileMetadataExprType(TBase):
    ORC_SARG = 1

    _VALUES_TO_NAMES = {
        1: "ORC_SARG",
    }

    _NAMES_TO_VALUES = {
        "ORC_SARG": 1,
    }


class ClientCapability(TBase):
    TEST_CAPABILITY = 1
    INSERT_ONLY_TABLES = 2

    _VALUES_TO_NAMES = {
        1: "TEST_CAPABILITY",
        2: "INSERT_ONLY_TABLES",
    }

    _NAMES_TO_VALUES = {
        "TEST_CAPABILITY": 1,
        "INSERT_ONLY_TABLES": 2,
    }


class WMResourcePlanStatus(TBase):
    ACTIVE = 1
    ENABLED = 2
    DISABLED = 3

    _VALUES_TO_NAMES = {
        1: "ACTIVE",
        2: "ENABLED",
        3: "DISABLED",
    }

    _NAMES_TO_VALUES = {
        "ACTIVE": 1,
        "ENABLED": 2,
        "DISABLED": 3,
    }


class WMPoolSchedulingPolicy(TBase):
    FAIR = 1
    FIFO = 2

    _VALUES_TO_NAMES = {
        1: "FAIR",
        2: "FIFO",
    }

    _NAMES_TO_VALUES = {
        "FAIR": 1,
        "FIFO": 2,
    }


class Version(TBase):
    """
    Attributes:
     - version
     - comments
    """

    __slots__ = (
        'version',
        'comments',
    )


    def __init__(self, version=None, comments=None,):
        self.version = version
        self.comments = comments


class FieldSchema(TBase):
    """
    Attributes:
     - name
     - type
     - comment
    """

    __slots__ = (
        'name',
        'type',
        'comment',
    )


    def __init__(self, name=None, type=None, comment=None,):
        self.name = name
        self.type = type
        self.comment = comment


class SQLPrimaryKey(TBase):
    """
    Attributes:
     - table_db
     - table_name
     - column_name
     - key_seq
     - pk_name
     - enable_cstr
     - validate_cstr
     - rely_cstr
     - catName
    """

    __slots__ = (
        'table_db',
        'table_name',
        'column_name',
        'key_seq',
        'pk_name',
        'enable_cstr',
        'validate_cstr',
        'rely_cstr',
        'catName',
    )


    def __init__(self, table_db=None, table_name=None, column_name=None, key_seq=None, pk_name=None, enable_cstr=None, validate_cstr=None, rely_cstr=None, catName=None,):
        self.table_db = table_db
        self.table_name = table_name
        self.column_name = column_name
        self.key_seq = key_seq
        self.pk_name = pk_name
        self.enable_cstr = enable_cstr
        self.validate_cstr = validate_cstr
        self.rely_cstr = rely_cstr
        self.catName = catName


class SQLForeignKey(TBase):
    """
    Attributes:
     - pktable_db
     - pktable_name
     - pkcolumn_name
     - fktable_db
     - fktable_name
     - fkcolumn_name
     - key_seq
     - update_rule
     - delete_rule
     - fk_name
     - pk_name
     - enable_cstr
     - validate_cstr
     - rely_cstr
     - catName
    """

    __slots__ = (
        'pktable_db',
        'pktable_name',
        'pkcolumn_name',
        'fktable_db',
        'fktable_name',
        'fkcolumn_name',
        'key_seq',
        'update_rule',
        'delete_rule',
        'fk_name',
        'pk_name',
        'enable_cstr',
        'validate_cstr',
        'rely_cstr',
        'catName',
    )


    def __init__(self, pktable_db=None, pktable_name=None, pkcolumn_name=None, fktable_db=None, fktable_name=None, fkcolumn_name=None, key_seq=None, update_rule=None, delete_rule=None, fk_name=None, pk_name=None, enable_cstr=None, validate_cstr=None, rely_cstr=None, catName=None,):
        self.pktable_db = pktable_db
        self.pktable_name = pktable_name
        self.pkcolumn_name = pkcolumn_name
        self.fktable_db = fktable_db
        self.fktable_name = fktable_name
        self.fkcolumn_name = fkcolumn_name
        self.key_seq = key_seq
        self.update_rule = update_rule
        self.delete_rule = delete_rule
        self.fk_name = fk_name
        self.pk_name = pk_name
        self.enable_cstr = enable_cstr
        self.validate_cstr = validate_cstr
        self.rely_cstr = rely_cstr
        self.catName = catName


class SQLUniqueConstraint(TBase):
    """
    Attributes:
     - catName
     - table_db
     - table_name
     - column_name
     - key_seq
     - uk_name
     - enable_cstr
     - validate_cstr
     - rely_cstr
    """

    __slots__ = (
        'catName',
        'table_db',
        'table_name',
        'column_name',
        'key_seq',
        'uk_name',
        'enable_cstr',
        'validate_cstr',
        'rely_cstr',
    )


    def __init__(self, catName=None, table_db=None, table_name=None, column_name=None, key_seq=None, uk_name=None, enable_cstr=None, validate_cstr=None, rely_cstr=None,):
        self.catName = catName
        self.table_db = table_db
        self.table_name = table_name
        self.column_name = column_name
        self.key_seq = key_seq
        self.uk_name = uk_name
        self.enable_cstr = enable_cstr
        self.validate_cstr = validate_cstr
        self.rely_cstr = rely_cstr


class SQLNotNullConstraint(TBase):
    """
    Attributes:
     - catName
     - table_db
     - table_name
     - column_name
     - nn_name
     - enable_cstr
     - validate_cstr
     - rely_cstr
    """

    __slots__ = (
        'catName',
        'table_db',
        'table_name',
        'column_name',
        'nn_name',
        'enable_cstr',
        'validate_cstr',
        'rely_cstr',
    )


    def __init__(self, catName=None, table_db=None, table_name=None, column_name=None, nn_name=None, enable_cstr=None, validate_cstr=None, rely_cstr=None,):
        self.catName = catName
        self.table_db = table_db
        self.table_name = table_name
        self.column_name = column_name
        self.nn_name = nn_name
        self.enable_cstr = enable_cstr
        self.validate_cstr = validate_cstr
        self.rely_cstr = rely_cstr


class SQLDefaultConstraint(TBase):
    """
    Attributes:
     - catName
     - table_db
     - table_name
     - column_name
     - default_value
     - dc_name
     - enable_cstr
     - validate_cstr
     - rely_cstr
    """

    __slots__ = (
        'catName',
        'table_db',
        'table_name',
        'column_name',
        'default_value',
        'dc_name',
        'enable_cstr',
        'validate_cstr',
        'rely_cstr',
    )


    def __init__(self, catName=None, table_db=None, table_name=None, column_name=None, default_value=None, dc_name=None, enable_cstr=None, validate_cstr=None, rely_cstr=None,):
        self.catName = catName
        self.table_db = table_db
        self.table_name = table_name
        self.column_name = column_name
        self.default_value = default_value
        self.dc_name = dc_name
        self.enable_cstr = enable_cstr
        self.validate_cstr = validate_cstr
        self.rely_cstr = rely_cstr


class SQLCheckConstraint(TBase):
    """
    Attributes:
     - catName
     - table_db
     - table_name
     - column_name
     - check_expression
     - dc_name
     - enable_cstr
     - validate_cstr
     - rely_cstr
    """

    __slots__ = (
        'catName',
        'table_db',
        'table_name',
        'column_name',
        'check_expression',
        'dc_name',
        'enable_cstr',
        'validate_cstr',
        'rely_cstr',
    )


    def __init__(self, catName=None, table_db=None, table_name=None, column_name=None, check_expression=None, dc_name=None, enable_cstr=None, validate_cstr=None, rely_cstr=None,):
        self.catName = catName
        self.table_db = table_db
        self.table_name = table_name
        self.column_name = column_name
        self.check_expression = check_expression
        self.dc_name = dc_name
        self.enable_cstr = enable_cstr
        self.validate_cstr = validate_cstr
        self.rely_cstr = rely_cstr


class Type(TBase):
    """
    Attributes:
     - name
     - type1
     - type2
     - fields
    """

    __slots__ = (
        'name',
        'type1',
        'type2',
        'fields',
    )


    def __init__(self, name=None, type1=None, type2=None, fields=None,):
        self.name = name
        self.type1 = type1
        self.type2 = type2
        self.fields = fields


class HiveObjectRef(TBase):
    """
    Attributes:
     - objectType
     - dbName
     - objectName
     - partValues
     - columnName
     - catName
    """

    __slots__ = (
        'objectType',
        'dbName',
        'objectName',
        'partValues',
        'columnName',
        'catName',
    )


    def __init__(self, objectType=None, dbName=None, objectName=None, partValues=None, columnName=None, catName=None,):
        self.objectType = objectType
        self.dbName = dbName
        self.objectName = objectName
        self.partValues = partValues
        self.columnName = columnName
        self.catName = catName


class PrivilegeGrantInfo(TBase):
    """
    Attributes:
     - privilege
     - createTime
     - grantor
     - grantorType
     - grantOption
    """

    __slots__ = (
        'privilege',
        'createTime',
        'grantor',
        'grantorType',
        'grantOption',
    )


    def __init__(self, privilege=None, createTime=None, grantor=None, grantorType=None, grantOption=None,):
        self.privilege = privilege
        self.createTime = createTime
        self.grantor = grantor
        self.grantorType = grantorType
        self.grantOption = grantOption


class HiveObjectPrivilege(TBase):
    """
    Attributes:
     - hiveObject
     - principalName
     - principalType
     - grantInfo
     - authorizer
    """

    __slots__ = (
        'hiveObject',
        'principalName',
        'principalType',
        'grantInfo',
        'authorizer',
    )


    def __init__(self, hiveObject=None, principalName=None, principalType=None, grantInfo=None, authorizer=None,):
        self.hiveObject = hiveObject
        self.principalName = principalName
        self.principalType = principalType
        self.grantInfo = grantInfo
        self.authorizer = authorizer


class PrivilegeBag(TBase):
    """
    Attributes:
     - privileges
    """

    __slots__ = (
        'privileges',
    )


    def __init__(self, privileges=None,):
        self.privileges = privileges


class PrincipalPrivilegeSet(TBase):
    """
    Attributes:
     - userPrivileges
     - groupPrivileges
     - rolePrivileges
    """

    __slots__ = (
        'userPrivileges',
        'groupPrivileges',
        'rolePrivileges',
    )


    def __init__(self, userPrivileges=None, groupPrivileges=None, rolePrivileges=None,):
        self.userPrivileges = userPrivileges
        self.groupPrivileges = groupPrivileges
        self.rolePrivileges = rolePrivileges


class GrantRevokePrivilegeRequest(TBase):
    """
    Attributes:
     - requestType
     - privileges
     - revokeGrantOption
    """

    __slots__ = (
        'requestType',
        'privileges',
        'revokeGrantOption',
    )


    def __init__(self, requestType=None, privileges=None, revokeGrantOption=None,):
        self.requestType = requestType
        self.privileges = privileges
        self.revokeGrantOption = revokeGrantOption


class GrantRevokePrivilegeResponse(TBase):
    """
    Attributes:
     - success
    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success


class Role(TBase):
    """
    Attributes:
     - roleName
     - createTime
     - ownerName
    """

    __slots__ = (
        'roleName',
        'createTime',
        'ownerName',
    )


    def __init__(self, roleName=None, createTime=None, ownerName=None,):
        self.roleName = roleName
        self.createTime = createTime
        self.ownerName = ownerName


class RolePrincipalGrant(TBase):
    """
    Attributes:
     - roleName
     - principalName
     - principalType
     - grantOption
     - grantTime
     - grantorName
     - grantorPrincipalType
    """

    __slots__ = (
        'roleName',
        'principalName',
        'principalType',
        'grantOption',
        'grantTime',
        'grantorName',
        'grantorPrincipalType',
    )


    def __init__(self, roleName=None, principalName=None, principalType=None, grantOption=None, grantTime=None, grantorName=None, grantorPrincipalType=None,):
        self.roleName = roleName
        self.principalName = principalName
        self.principalType = principalType
        self.grantOption = grantOption
        self.grantTime = grantTime
        self.grantorName = grantorName
        self.grantorPrincipalType = grantorPrincipalType


class GetRoleGrantsForPrincipalRequest(TBase):
    """
    Attributes:
     - principal_name
     - principal_type
    """

    __slots__ = (
        'principal_name',
        'principal_type',
    )


    def __init__(self, principal_name=None, principal_type=None,):
        self.principal_name = principal_name
        self.principal_type = principal_type


class GetRoleGrantsForPrincipalResponse(TBase):
    """
    Attributes:
     - principalGrants
    """

    __slots__ = (
        'principalGrants',
    )


    def __init__(self, principalGrants=None,):
        self.principalGrants = principalGrants


class GetPrincipalsInRoleRequest(TBase):
    """
    Attributes:
     - roleName
    """

    __slots__ = (
        'roleName',
    )


    def __init__(self, roleName=None,):
        self.roleName = roleName


class GetPrincipalsInRoleResponse(TBase):
    """
    Attributes:
     - principalGrants
    """

    __slots__ = (
        'principalGrants',
    )


    def __init__(self, principalGrants=None,):
        self.principalGrants = principalGrants


class GrantRevokeRoleRequest(TBase):
    """
    Attributes:
     - requestType
     - roleName
     - principalName
     - principalType
     - grantor
     - grantorType
     - grantOption
    """

    __slots__ = (
        'requestType',
        'roleName',
        'principalName',
        'principalType',
        'grantor',
        'grantorType',
        'grantOption',
    )


    def __init__(self, requestType=None, roleName=None, principalName=None, principalType=None, grantor=None, grantorType=None, grantOption=None,):
        self.requestType = requestType
        self.roleName = roleName
        self.principalName = principalName
        self.principalType = principalType
        self.grantor = grantor
        self.grantorType = grantorType
        self.grantOption = grantOption


class GrantRevokeRoleResponse(TBase):
    """
    Attributes:
     - success
    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success


class Catalog(TBase):
    """
    Attributes:
     - name
     - description
     - locationUri
    """

    __slots__ = (
        'name',
        'description',
        'locationUri',
    )


    def __init__(self, name=None, description=None, locationUri=None,):
        self.name = name
        self.description = description
        self.locationUri = locationUri


class CreateCatalogRequest(TBase):
    """
    Attributes:
     - catalog
    """

    __slots__ = (
        'catalog',
    )


    def __init__(self, catalog=None,):
        self.catalog = catalog


class AlterCatalogRequest(TBase):
    """
    Attributes:
     - name
     - newCat
    """

    __slots__ = (
        'name',
        'newCat',
    )


    def __init__(self, name=None, newCat=None,):
        self.name = name
        self.newCat = newCat


class GetCatalogRequest(TBase):
    """
    Attributes:
     - name
    """

    __slots__ = (
        'name',
    )


    def __init__(self, name=None,):
        self.name = name


class GetCatalogResponse(TBase):
    """
    Attributes:
     - catalog
    """

    __slots__ = (
        'catalog',
    )


    def __init__(self, catalog=None,):
        self.catalog = catalog


class GetCatalogsResponse(TBase):
    """
    Attributes:
     - names
    """

    __slots__ = (
        'names',
    )


    def __init__(self, names=None,):
        self.names = names


class DropCatalogRequest(TBase):
    """
    Attributes:
     - name
    """

    __slots__ = (
        'name',
    )


    def __init__(self, name=None,):
        self.name = name


class Database(TBase):
    """
    Attributes:
     - name
     - description
     - locationUri
     - parameters
     - privileges
     - ownerName
     - ownerType
     - catalogName
    """

    __slots__ = (
        'name',
        'description',
        'locationUri',
        'parameters',
        'privileges',
        'ownerName',
        'ownerType',
        'catalogName',
    )


    def __init__(self, name=None, description=None, locationUri=None, parameters=None, privileges=None, ownerName=None, ownerType=None, catalogName=None,):
        self.name = name
        self.description = description
        self.locationUri = locationUri
        self.parameters = parameters
        self.privileges = privileges
        self.ownerName = ownerName
        self.ownerType = ownerType
        self.catalogName = catalogName


class SerDeInfo(TBase):
    """
    Attributes:
     - name
     - serializationLib
     - parameters
     - description
     - serializerClass
     - deserializerClass
     - serdeType
    """

    __slots__ = (
        'name',
        'serializationLib',
        'parameters',
        'description',
        'serializerClass',
        'deserializerClass',
        'serdeType',
    )


    def __init__(self, name=None, serializationLib=None, parameters=None, description=None, serializerClass=None, deserializerClass=None, serdeType=None,):
        self.name = name
        self.serializationLib = serializationLib
        self.parameters = parameters
        self.description = description
        self.serializerClass = serializerClass
        self.deserializerClass = deserializerClass
        self.serdeType = serdeType


class Order(TBase):
    """
    Attributes:
     - col
     - order
    """

    __slots__ = (
        'col',
        'order',
    )


    def __init__(self, col=None, order=None,):
        self.col = col
        self.order = order


class SkewedInfo(TBase):
    """
    Attributes:
     - skewedColNames
     - skewedColValues
     - skewedColValueLocationMaps
    """

    __slots__ = (
        'skewedColNames',
        'skewedColValues',
        'skewedColValueLocationMaps',
    )


    def __init__(self, skewedColNames=None, skewedColValues=None, skewedColValueLocationMaps=None,):
        self.skewedColNames = skewedColNames
        self.skewedColValues = skewedColValues
        self.skewedColValueLocationMaps = skewedColValueLocationMaps


class StorageDescriptor(TBase):
    """
    Attributes:
     - cols
     - location
     - inputFormat
     - outputFormat
     - compressed
     - numBuckets
     - serdeInfo
     - bucketCols
     - sortCols
     - parameters
     - skewedInfo
     - storedAsSubDirectories
    """

    __slots__ = (
        'cols',
        'location',
        'inputFormat',
        'outputFormat',
        'compressed',
        'numBuckets',
        'serdeInfo',
        'bucketCols',
        'sortCols',
        'parameters',
        'skewedInfo',
        'storedAsSubDirectories',
    )


    def __init__(self, cols=None, location=None, inputFormat=None, outputFormat=None, compressed=None, numBuckets=None, serdeInfo=None, bucketCols=None, sortCols=None, parameters=None, skewedInfo=None, storedAsSubDirectories=None,):
        self.cols = cols
        self.location = location
        self.inputFormat = inputFormat
        self.outputFormat = outputFormat
        self.compressed = compressed
        self.numBuckets = numBuckets
        self.serdeInfo = serdeInfo
        self.bucketCols = bucketCols
        self.sortCols = sortCols
        self.parameters = parameters
        self.skewedInfo = skewedInfo
        self.storedAsSubDirectories = storedAsSubDirectories


class Table(TBase):
    """
    Attributes:
     - tableName
     - dbName
     - owner
     - createTime
     - lastAccessTime
     - retention
     - sd
     - partitionKeys
     - parameters
     - viewOriginalText
     - viewExpandedText
     - tableType
     - privileges
     - temporary
     - rewriteEnabled
     - creationMetadata
     - catName
     - ownerType
    """

    __slots__ = (
        'tableName',
        'dbName',
        'owner',
        'createTime',
        'lastAccessTime',
        'retention',
        'sd',
        'partitionKeys',
        'parameters',
        'viewOriginalText',
        'viewExpandedText',
        'tableType',
        'privileges',
        'temporary',
        'rewriteEnabled',
        'creationMetadata',
        'catName',
        'ownerType',
    )


    def __init__(self, tableName=None, dbName=None, owner=None, createTime=None, lastAccessTime=None, retention=None, sd=None, partitionKeys=None, parameters=None, viewOriginalText=None, viewExpandedText=None, tableType=None, privileges=None, temporary=False, rewriteEnabled=None, creationMetadata=None, catName=None, ownerType=1,):
        self.tableName = tableName
        self.dbName = dbName
        self.owner = owner
        self.createTime = createTime
        self.lastAccessTime = lastAccessTime
        self.retention = retention
        self.sd = sd
        self.partitionKeys = partitionKeys
        self.parameters = parameters
        self.viewOriginalText = viewOriginalText
        self.viewExpandedText = viewExpandedText
        self.tableType = tableType
        self.privileges = privileges
        self.temporary = temporary
        self.rewriteEnabled = rewriteEnabled
        self.creationMetadata = creationMetadata
        self.catName = catName
        self.ownerType = ownerType


class Partition(TBase):
    """
    Attributes:
     - values
     - dbName
     - tableName
     - createTime
     - lastAccessTime
     - sd
     - parameters
     - privileges
     - catName
    """

    __slots__ = (
        'values',
        'dbName',
        'tableName',
        'createTime',
        'lastAccessTime',
        'sd',
        'parameters',
        'privileges',
        'catName',
    )


    def __init__(self, values=None, dbName=None, tableName=None, createTime=None, lastAccessTime=None, sd=None, parameters=None, privileges=None, catName=None,):
        self.values = values
        self.dbName = dbName
        self.tableName = tableName
        self.createTime = createTime
        self.lastAccessTime = lastAccessTime
        self.sd = sd
        self.parameters = parameters
        self.privileges = privileges
        self.catName = catName


class PartitionWithoutSD(TBase):
    """
    Attributes:
     - values
     - createTime
     - lastAccessTime
     - relativePath
     - parameters
     - privileges
    """

    __slots__ = (
        'values',
        'createTime',
        'lastAccessTime',
        'relativePath',
        'parameters',
        'privileges',
    )


    def __init__(self, values=None, createTime=None, lastAccessTime=None, relativePath=None, parameters=None, privileges=None,):
        self.values = values
        self.createTime = createTime
        self.lastAccessTime = lastAccessTime
        self.relativePath = relativePath
        self.parameters = parameters
        self.privileges = privileges


class PartitionSpecWithSharedSD(TBase):
    """
    Attributes:
     - partitions
     - sd
    """

    __slots__ = (
        'partitions',
        'sd',
    )


    def __init__(self, partitions=None, sd=None,):
        self.partitions = partitions
        self.sd = sd


class PartitionListComposingSpec(TBase):
    """
    Attributes:
     - partitions
    """

    __slots__ = (
        'partitions',
    )


    def __init__(self, partitions=None,):
        self.partitions = partitions


class PartitionSpec(TBase):
    """
    Attributes:
     - dbName
     - tableName
     - rootPath
     - sharedSDPartitionSpec
     - partitionList
     - catName
    """

    __slots__ = (
        'dbName',
        'tableName',
        'rootPath',
        'sharedSDPartitionSpec',
        'partitionList',
        'catName',
    )


    def __init__(self, dbName=None, tableName=None, rootPath=None, sharedSDPartitionSpec=None, partitionList=None, catName=None,):
        self.dbName = dbName
        self.tableName = tableName
        self.rootPath = rootPath
        self.sharedSDPartitionSpec = sharedSDPartitionSpec
        self.partitionList = partitionList
        self.catName = catName


class BooleanColumnStatsData(TBase):
    """
    Attributes:
     - numTrues
     - numFalses
     - numNulls
     - bitVectors
    """

    __slots__ = (
        'numTrues',
        'numFalses',
        'numNulls',
        'bitVectors',
    )


    def __init__(self, numTrues=None, numFalses=None, numNulls=None, bitVectors=None,):
        self.numTrues = numTrues
        self.numFalses = numFalses
        self.numNulls = numNulls
        self.bitVectors = bitVectors


class DoubleColumnStatsData(TBase):
    """
    Attributes:
     - lowValue
     - highValue
     - numNulls
     - numDVs
     - bitVectors
    """

    __slots__ = (
        'lowValue',
        'highValue',
        'numNulls',
        'numDVs',
        'bitVectors',
    )


    def __init__(self, lowValue=None, highValue=None, numNulls=None, numDVs=None, bitVectors=None,):
        self.lowValue = lowValue
        self.highValue = highValue
        self.numNulls = numNulls
        self.numDVs = numDVs
        self.bitVectors = bitVectors


class LongColumnStatsData(TBase):
    """
    Attributes:
     - lowValue
     - highValue
     - numNulls
     - numDVs
     - bitVectors
    """

    __slots__ = (
        'lowValue',
        'highValue',
        'numNulls',
        'numDVs',
        'bitVectors',
    )


    def __init__(self, lowValue=None, highValue=None, numNulls=None, numDVs=None, bitVectors=None,):
        self.lowValue = lowValue
        self.highValue = highValue
        self.numNulls = numNulls
        self.numDVs = numDVs
        self.bitVectors = bitVectors


class StringColumnStatsData(TBase):
    """
    Attributes:
     - maxColLen
     - avgColLen
     - numNulls
     - numDVs
     - bitVectors
    """

    __slots__ = (
        'maxColLen',
        'avgColLen',
        'numNulls',
        'numDVs',
        'bitVectors',
    )


    def __init__(self, maxColLen=None, avgColLen=None, numNulls=None, numDVs=None, bitVectors=None,):
        self.maxColLen = maxColLen
        self.avgColLen = avgColLen
        self.numNulls = numNulls
        self.numDVs = numDVs
        self.bitVectors = bitVectors


class BinaryColumnStatsData(TBase):
    """
    Attributes:
     - maxColLen
     - avgColLen
     - numNulls
     - bitVectors
    """

    __slots__ = (
        'maxColLen',
        'avgColLen',
        'numNulls',
        'bitVectors',
    )


    def __init__(self, maxColLen=None, avgColLen=None, numNulls=None, bitVectors=None,):
        self.maxColLen = maxColLen
        self.avgColLen = avgColLen
        self.numNulls = numNulls
        self.bitVectors = bitVectors


class Decimal(TBase):
    """
    Attributes:
     - scale
     - unscaled
    """

    __slots__ = (
        'unscaled',
        'scale',
    )


    def __init__(self, scale=None, unscaled=None,):
        self.scale = scale
        self.unscaled = unscaled


class DecimalColumnStatsData(TBase):
    """
    Attributes:
     - lowValue
     - highValue
     - numNulls
     - numDVs
     - bitVectors
    """

    __slots__ = (
        'lowValue',
        'highValue',
        'numNulls',
        'numDVs',
        'bitVectors',
    )


    def __init__(self, lowValue=None, highValue=None, numNulls=None, numDVs=None, bitVectors=None,):
        self.lowValue = lowValue
        self.highValue = highValue
        self.numNulls = numNulls
        self.numDVs = numDVs
        self.bitVectors = bitVectors


class Date(TBase):
    """
    Attributes:
     - daysSinceEpoch
    """

    __slots__ = (
        'daysSinceEpoch',
    )


    def __init__(self, daysSinceEpoch=None,):
        self.daysSinceEpoch = daysSinceEpoch


class DateColumnStatsData(TBase):
    """
    Attributes:
     - lowValue
     - highValue
     - numNulls
     - numDVs
     - bitVectors
    """

    __slots__ = (
        'lowValue',
        'highValue',
        'numNulls',
        'numDVs',
        'bitVectors',
    )


    def __init__(self, lowValue=None, highValue=None, numNulls=None, numDVs=None, bitVectors=None,):
        self.lowValue = lowValue
        self.highValue = highValue
        self.numNulls = numNulls
        self.numDVs = numDVs
        self.bitVectors = bitVectors


class ColumnStatisticsData(TBase):
    """
    Attributes:
     - booleanStats
     - longStats
     - doubleStats
     - stringStats
     - binaryStats
     - decimalStats
     - dateStats
    """

    __slots__ = (
        'booleanStats',
        'longStats',
        'doubleStats',
        'stringStats',
        'binaryStats',
        'decimalStats',
        'dateStats',
    )


    def __init__(self, booleanStats=None, longStats=None, doubleStats=None, stringStats=None, binaryStats=None, decimalStats=None, dateStats=None,):
        self.booleanStats = booleanStats
        self.longStats = longStats
        self.doubleStats = doubleStats
        self.stringStats = stringStats
        self.binaryStats = binaryStats
        self.decimalStats = decimalStats
        self.dateStats = dateStats


class ColumnStatisticsObj(TBase):
    """
    Attributes:
     - colName
     - colType
     - statsData
    """

    __slots__ = (
        'colName',
        'colType',
        'statsData',
    )


    def __init__(self, colName=None, colType=None, statsData=None,):
        self.colName = colName
        self.colType = colType
        self.statsData = statsData


class ColumnStatisticsDesc(TBase):
    """
    Attributes:
     - isTblLevel
     - dbName
     - tableName
     - partName
     - lastAnalyzed
     - catName
    """

    __slots__ = (
        'isTblLevel',
        'dbName',
        'tableName',
        'partName',
        'lastAnalyzed',
        'catName',
    )


    def __init__(self, isTblLevel=None, dbName=None, tableName=None, partName=None, lastAnalyzed=None, catName=None,):
        self.isTblLevel = isTblLevel
        self.dbName = dbName
        self.tableName = tableName
        self.partName = partName
        self.lastAnalyzed = lastAnalyzed
        self.catName = catName


class ColumnStatistics(TBase):
    """
    Attributes:
     - statsDesc
     - statsObj
    """

    __slots__ = (
        'statsDesc',
        'statsObj',
    )


    def __init__(self, statsDesc=None, statsObj=None,):
        self.statsDesc = statsDesc
        self.statsObj = statsObj


class AggrStats(TBase):
    """
    Attributes:
     - colStats
     - partsFound
    """

    __slots__ = (
        'colStats',
        'partsFound',
    )


    def __init__(self, colStats=None, partsFound=None,):
        self.colStats = colStats
        self.partsFound = partsFound


class SetPartitionsStatsRequest(TBase):
    """
    Attributes:
     - colStats
     - needMerge
    """

    __slots__ = (
        'colStats',
        'needMerge',
    )


    def __init__(self, colStats=None, needMerge=None,):
        self.colStats = colStats
        self.needMerge = needMerge


class Schema(TBase):
    """
    Attributes:
     - fieldSchemas
     - properties
    """

    __slots__ = (
        'fieldSchemas',
        'properties',
    )


    def __init__(self, fieldSchemas=None, properties=None,):
        self.fieldSchemas = fieldSchemas
        self.properties = properties


class EnvironmentContext(TBase):
    """
    Attributes:
     - properties
    """

    __slots__ = (
        'properties',
    )


    def __init__(self, properties=None,):
        self.properties = properties


class PrimaryKeysRequest(TBase):
    """
    Attributes:
     - db_name
     - tbl_name
     - catName
    """

    __slots__ = (
        'db_name',
        'tbl_name',
        'catName',
    )


    def __init__(self, db_name=None, tbl_name=None, catName=None,):
        self.db_name = db_name
        self.tbl_name = tbl_name
        self.catName = catName


class PrimaryKeysResponse(TBase):
    """
    Attributes:
     - primaryKeys
    """

    __slots__ = (
        'primaryKeys',
    )


    def __init__(self, primaryKeys=None,):
        self.primaryKeys = primaryKeys


class ForeignKeysRequest(TBase):
    """
    Attributes:
     - parent_db_name
     - parent_tbl_name
     - foreign_db_name
     - foreign_tbl_name
     - catName
    """

    __slots__ = (
        'parent_db_name',
        'parent_tbl_name',
        'foreign_db_name',
        'foreign_tbl_name',
        'catName',
    )


    def __init__(self, parent_db_name=None, parent_tbl_name=None, foreign_db_name=None, foreign_tbl_name=None, catName=None,):
        self.parent_db_name = parent_db_name
        self.parent_tbl_name = parent_tbl_name
        self.foreign_db_name = foreign_db_name
        self.foreign_tbl_name = foreign_tbl_name
        self.catName = catName


class ForeignKeysResponse(TBase):
    """
    Attributes:
     - foreignKeys
    """

    __slots__ = (
        'foreignKeys',
    )


    def __init__(self, foreignKeys=None,):
        self.foreignKeys = foreignKeys


class UniqueConstraintsRequest(TBase):
    """
    Attributes:
     - catName
     - db_name
     - tbl_name
    """

    __slots__ = (
        'catName',
        'db_name',
        'tbl_name',
    )


    def __init__(self, catName=None, db_name=None, tbl_name=None,):
        self.catName = catName
        self.db_name = db_name
        self.tbl_name = tbl_name


class UniqueConstraintsResponse(TBase):
    """
    Attributes:
     - uniqueConstraints
    """

    __slots__ = (
        'uniqueConstraints',
    )


    def __init__(self, uniqueConstraints=None,):
        self.uniqueConstraints = uniqueConstraints


class NotNullConstraintsRequest(TBase):
    """
    Attributes:
     - catName
     - db_name
     - tbl_name
    """

    __slots__ = (
        'catName',
        'db_name',
        'tbl_name',
    )


    def __init__(self, catName=None, db_name=None, tbl_name=None,):
        self.catName = catName
        self.db_name = db_name
        self.tbl_name = tbl_name


class NotNullConstraintsResponse(TBase):
    """
    Attributes:
     - notNullConstraints
    """

    __slots__ = (
        'notNullConstraints',
    )


    def __init__(self, notNullConstraints=None,):
        self.notNullConstraints = notNullConstraints


class DefaultConstraintsRequest(TBase):
    """
    Attributes:
     - catName
     - db_name
     - tbl_name
    """

    __slots__ = (
        'catName',
        'db_name',
        'tbl_name',
    )


    def __init__(self, catName=None, db_name=None, tbl_name=None,):
        self.catName = catName
        self.db_name = db_name
        self.tbl_name = tbl_name


class DefaultConstraintsResponse(TBase):
    """
    Attributes:
     - defaultConstraints
    """

    __slots__ = (
        'defaultConstraints',
    )


    def __init__(self, defaultConstraints=None,):
        self.defaultConstraints = defaultConstraints


class CheckConstraintsRequest(TBase):
    """
    Attributes:
     - catName
     - db_name
     - tbl_name
    """

    __slots__ = (
        'catName',
        'db_name',
        'tbl_name',
    )


    def __init__(self, catName=None, db_name=None, tbl_name=None,):
        self.catName = catName
        self.db_name = db_name
        self.tbl_name = tbl_name


class CheckConstraintsResponse(TBase):
    """
    Attributes:
     - checkConstraints
    """

    __slots__ = (
        'checkConstraints',
    )


    def __init__(self, checkConstraints=None,):
        self.checkConstraints = checkConstraints


class DropConstraintRequest(TBase):
    """
    Attributes:
     - dbname
     - tablename
     - constraintname
     - catName
    """

    __slots__ = (
        'dbname',
        'tablename',
        'constraintname',
        'catName',
    )


    def __init__(self, dbname=None, tablename=None, constraintname=None, catName=None,):
        self.dbname = dbname
        self.tablename = tablename
        self.constraintname = constraintname
        self.catName = catName


class AddPrimaryKeyRequest(TBase):
    """
    Attributes:
     - primaryKeyCols
    """

    __slots__ = (
        'primaryKeyCols',
    )


    def __init__(self, primaryKeyCols=None,):
        self.primaryKeyCols = primaryKeyCols


class AddForeignKeyRequest(TBase):
    """
    Attributes:
     - foreignKeyCols
    """

    __slots__ = (
        'foreignKeyCols',
    )


    def __init__(self, foreignKeyCols=None,):
        self.foreignKeyCols = foreignKeyCols


class AddUniqueConstraintRequest(TBase):
    """
    Attributes:
     - uniqueConstraintCols
    """

    __slots__ = (
        'uniqueConstraintCols',
    )


    def __init__(self, uniqueConstraintCols=None,):
        self.uniqueConstraintCols = uniqueConstraintCols


class AddNotNullConstraintRequest(TBase):
    """
    Attributes:
     - notNullConstraintCols
    """

    __slots__ = (
        'notNullConstraintCols',
    )


    def __init__(self, notNullConstraintCols=None,):
        self.notNullConstraintCols = notNullConstraintCols


class AddDefaultConstraintRequest(TBase):
    """
    Attributes:
     - defaultConstraintCols
    """

    __slots__ = (
        'defaultConstraintCols',
    )


    def __init__(self, defaultConstraintCols=None,):
        self.defaultConstraintCols = defaultConstraintCols


class AddCheckConstraintRequest(TBase):
    """
    Attributes:
     - checkConstraintCols
    """

    __slots__ = (
        'checkConstraintCols',
    )


    def __init__(self, checkConstraintCols=None,):
        self.checkConstraintCols = checkConstraintCols


class PartitionsByExprResult(TBase):
    """
    Attributes:
     - partitions
     - hasUnknownPartitions
    """

    __slots__ = (
        'partitions',
        'hasUnknownPartitions',
    )


    def __init__(self, partitions=None, hasUnknownPartitions=None,):
        self.partitions = partitions
        self.hasUnknownPartitions = hasUnknownPartitions


class PartitionsByExprRequest(TBase):
    """
    Attributes:
     - dbName
     - tblName
     - expr
     - defaultPartitionName
     - maxParts
     - catName
    """

    __slots__ = (
        'dbName',
        'tblName',
        'expr',
        'defaultPartitionName',
        'maxParts',
        'catName',
    )


    def __init__(self, dbName=None, tblName=None, expr=None, defaultPartitionName=None, maxParts=-1, catName=None,):
        self.dbName = dbName
        self.tblName = tblName
        self.expr = expr
        self.defaultPartitionName = defaultPartitionName
        self.maxParts = maxParts
        self.catName = catName


class TableStatsResult(TBase):
    """
    Attributes:
     - tableStats
    """

    __slots__ = (
        'tableStats',
    )


    def __init__(self, tableStats=None,):
        self.tableStats = tableStats


class PartitionsStatsResult(TBase):
    """
    Attributes:
     - partStats
    """

    __slots__ = (
        'partStats',
    )


    def __init__(self, partStats=None,):
        self.partStats = partStats


class TableStatsRequest(TBase):
    """
    Attributes:
     - dbName
     - tblName
     - colNames
     - catName
    """

    __slots__ = (
        'dbName',
        'tblName',
        'colNames',
        'catName',
    )


    def __init__(self, dbName=None, tblName=None, colNames=None, catName=None,):
        self.dbName = dbName
        self.tblName = tblName
        self.colNames = colNames
        self.catName = catName


class PartitionsStatsRequest(TBase):
    """
    Attributes:
     - dbName
     - tblName
     - colNames
     - partNames
     - catName
    """

    __slots__ = (
        'dbName',
        'tblName',
        'colNames',
        'partNames',
        'catName',
    )


    def __init__(self, dbName=None, tblName=None, colNames=None, partNames=None, catName=None,):
        self.dbName = dbName
        self.tblName = tblName
        self.colNames = colNames
        self.partNames = partNames
        self.catName = catName


class AddPartitionsResult(TBase):
    """
    Attributes:
     - partitions
    """

    __slots__ = (
        'partitions',
    )


    def __init__(self, partitions=None,):
        self.partitions = partitions


class AddPartitionsRequest(TBase):
    """
    Attributes:
     - dbName
     - tblName
     - parts
     - ifNotExists
     - needResult
     - catName
    """

    __slots__ = (
        'dbName',
        'tblName',
        'parts',
        'ifNotExists',
        'needResult',
        'catName',
    )


    def __init__(self, dbName=None, tblName=None, parts=None, ifNotExists=None, needResult=True, catName=None,):
        self.dbName = dbName
        self.tblName = tblName
        self.parts = parts
        self.ifNotExists = ifNotExists
        self.needResult = needResult
        self.catName = catName


class DropPartitionsResult(TBase):
    """
    Attributes:
     - partitions
    """

    __slots__ = (
        'partitions',
    )


    def __init__(self, partitions=None,):
        self.partitions = partitions


class DropPartitionsExpr(TBase):
    """
    Attributes:
     - expr
     - partArchiveLevel
    """

    __slots__ = (
        'expr',
        'partArchiveLevel',
    )


    def __init__(self, expr=None, partArchiveLevel=None,):
        self.expr = expr
        self.partArchiveLevel = partArchiveLevel


class RequestPartsSpec(TBase):
    """
    Attributes:
     - names
     - exprs
    """

    __slots__ = (
        'names',
        'exprs',
    )


    def __init__(self, names=None, exprs=None,):
        self.names = names
        self.exprs = exprs


class DropPartitionsRequest(TBase):
    """
    Attributes:
     - dbName
     - tblName
     - parts
     - deleteData
     - ifExists
     - ignoreProtection
     - environmentContext
     - needResult
     - catName
    """

    __slots__ = (
        'dbName',
        'tblName',
        'parts',
        'deleteData',
        'ifExists',
        'ignoreProtection',
        'environmentContext',
        'needResult',
        'catName',
    )


    def __init__(self, dbName=None, tblName=None, parts=None, deleteData=None, ifExists=True, ignoreProtection=None, environmentContext=None, needResult=True, catName=None,):
        self.dbName = dbName
        self.tblName = tblName
        self.parts = parts
        self.deleteData = deleteData
        self.ifExists = ifExists
        self.ignoreProtection = ignoreProtection
        self.environmentContext = environmentContext
        self.needResult = needResult
        self.catName = catName


class PartitionValuesRequest(TBase):
    """
    Attributes:
     - dbName
     - tblName
     - partitionKeys
     - applyDistinct
     - filter
     - partitionOrder
     - ascending
     - maxParts
     - catName
    """

    __slots__ = (
        'dbName',
        'tblName',
        'partitionKeys',
        'applyDistinct',
        'filter',
        'partitionOrder',
        'ascending',
        'maxParts',
        'catName',
    )


    def __init__(self, dbName=None, tblName=None, partitionKeys=None, applyDistinct=True, filter=None, partitionOrder=None, ascending=True, maxParts=-1, catName=None,):
        self.dbName = dbName
        self.tblName = tblName
        self.partitionKeys = partitionKeys
        self.applyDistinct = applyDistinct
        self.filter = filter
        self.partitionOrder = partitionOrder
        self.ascending = ascending
        self.maxParts = maxParts
        self.catName = catName


class PartitionValuesRow(TBase):
    """
    Attributes:
     - row
    """

    __slots__ = (
        'row',
    )


    def __init__(self, row=None,):
        self.row = row


class PartitionValuesResponse(TBase):
    """
    Attributes:
     - partitionValues
    """

    __slots__ = (
        'partitionValues',
    )


    def __init__(self, partitionValues=None,):
        self.partitionValues = partitionValues


class ResourceUri(TBase):
    """
    Attributes:
     - resourceType
     - uri
    """

    __slots__ = (
        'resourceType',
        'uri',
    )


    def __init__(self, resourceType=None, uri=None,):
        self.resourceType = resourceType
        self.uri = uri


class Function(TBase):
    """
    Attributes:
     - functionName
     - dbName
     - className
     - ownerName
     - ownerType
     - createTime
     - functionType
     - resourceUris
     - catName
    """

    __slots__ = (
        'functionName',
        'dbName',
        'className',
        'ownerName',
        'ownerType',
        'createTime',
        'functionType',
        'resourceUris',
        'catName',
    )


    def __init__(self, functionName=None, dbName=None, className=None, ownerName=None, ownerType=None, createTime=None, functionType=None, resourceUris=None, catName=None,):
        self.functionName = functionName
        self.dbName = dbName
        self.className = className
        self.ownerName = ownerName
        self.ownerType = ownerType
        self.createTime = createTime
        self.functionType = functionType
        self.resourceUris = resourceUris
        self.catName = catName


class TxnInfo(TBase):
    """
    Attributes:
     - id
     - state
     - user
     - hostname
     - agentInfo
     - heartbeatCount
     - metaInfo
     - startedTime
     - lastHeartbeatTime
    """

    __slots__ = (
        'id',
        'state',
        'user',
        'hostname',
        'agentInfo',
        'heartbeatCount',
        'metaInfo',
        'startedTime',
        'lastHeartbeatTime',
    )


    def __init__(self, id=None, state=None, user=None, hostname=None, agentInfo="Unknown", heartbeatCount=0, metaInfo=None, startedTime=None, lastHeartbeatTime=None,):
        self.id = id
        self.state = state
        self.user = user
        self.hostname = hostname
        self.agentInfo = agentInfo
        self.heartbeatCount = heartbeatCount
        self.metaInfo = metaInfo
        self.startedTime = startedTime
        self.lastHeartbeatTime = lastHeartbeatTime


class GetOpenTxnsInfoResponse(TBase):
    """
    Attributes:
     - txn_high_water_mark
     - open_txns
    """

    __slots__ = (
        'txn_high_water_mark',
        'open_txns',
    )


    def __init__(self, txn_high_water_mark=None, open_txns=None,):
        self.txn_high_water_mark = txn_high_water_mark
        self.open_txns = open_txns


class GetOpenTxnsResponse(TBase):
    """
    Attributes:
     - txn_high_water_mark
     - open_txns
     - min_open_txn
     - abortedBits
    """

    __slots__ = (
        'txn_high_water_mark',
        'open_txns',
        'min_open_txn',
        'abortedBits',
    )


    def __init__(self, txn_high_water_mark=None, open_txns=None, min_open_txn=None, abortedBits=None,):
        self.txn_high_water_mark = txn_high_water_mark
        self.open_txns = open_txns
        self.min_open_txn = min_open_txn
        self.abortedBits = abortedBits


class OpenTxnRequest(TBase):
    """
    Attributes:
     - num_txns
     - user
     - hostname
     - agentInfo
     - replPolicy
     - replSrcTxnIds
    """

    __slots__ = (
        'num_txns',
        'user',
        'hostname',
        'agentInfo',
        'replPolicy',
        'replSrcTxnIds',
    )


    def __init__(self, num_txns=None, user=None, hostname=None, agentInfo="Unknown", replPolicy=None, replSrcTxnIds=None,):
        self.num_txns = num_txns
        self.user = user
        self.hostname = hostname
        self.agentInfo = agentInfo
        self.replPolicy = replPolicy
        self.replSrcTxnIds = replSrcTxnIds


class OpenTxnsResponse(TBase):
    """
    Attributes:
     - txn_ids
    """

    __slots__ = (
        'txn_ids',
    )


    def __init__(self, txn_ids=None,):
        self.txn_ids = txn_ids


class AbortTxnRequest(TBase):
    """
    Attributes:
     - txnid
     - replPolicy
    """

    __slots__ = (
        'txnid',
        'replPolicy',
    )


    def __init__(self, txnid=None, replPolicy=None,):
        self.txnid = txnid
        self.replPolicy = replPolicy


class AbortTxnsRequest(TBase):
    """
    Attributes:
     - txn_ids
    """

    __slots__ = (
        'txn_ids',
    )


    def __init__(self, txn_ids=None,):
        self.txn_ids = txn_ids


class CommitTxnRequest(TBase):
    """
    Attributes:
     - txnid
     - replPolicy
    """

    __slots__ = (
        'txnid',
        'replPolicy',
    )


    def __init__(self, txnid=None, replPolicy=None,):
        self.txnid = txnid
        self.replPolicy = replPolicy


class ReplTblWriteIdStateRequest(TBase):
    """
    Attributes:
     - validWriteIdlist
     - user
     - hostName
     - dbName
     - tableName
     - partNames
    """

    __slots__ = (
        'validWriteIdlist',
        'user',
        'hostName',
        'dbName',
        'tableName',
        'partNames',
    )


    def __init__(self, validWriteIdlist=None, user=None, hostName=None, dbName=None, tableName=None, partNames=None,):
        self.validWriteIdlist = validWriteIdlist
        self.user = user
        self.hostName = hostName
        self.dbName = dbName
        self.tableName = tableName
        self.partNames = partNames


class GetValidWriteIdsRequest(TBase):
    """
    Attributes:
     - fullTableNames
     - validTxnList
    """

    __slots__ = (
        'fullTableNames',
        'validTxnList',
    )


    def __init__(self, fullTableNames=None, validTxnList=None,):
        self.fullTableNames = fullTableNames
        self.validTxnList = validTxnList


class TableValidWriteIds(TBase):
    """
    Attributes:
     - fullTableName
     - writeIdHighWaterMark
     - invalidWriteIds
     - minOpenWriteId
     - abortedBits
    """

    __slots__ = (
        'fullTableName',
        'writeIdHighWaterMark',
        'invalidWriteIds',
        'minOpenWriteId',
        'abortedBits',
    )


    def __init__(self, fullTableName=None, writeIdHighWaterMark=None, invalidWriteIds=None, minOpenWriteId=None, abortedBits=None,):
        self.fullTableName = fullTableName
        self.writeIdHighWaterMark = writeIdHighWaterMark
        self.invalidWriteIds = invalidWriteIds
        self.minOpenWriteId = minOpenWriteId
        self.abortedBits = abortedBits


class GetValidWriteIdsResponse(TBase):
    """
    Attributes:
     - tblValidWriteIds
    """

    __slots__ = (
        'tblValidWriteIds',
    )


    def __init__(self, tblValidWriteIds=None,):
        self.tblValidWriteIds = tblValidWriteIds


class AllocateTableWriteIdsRequest(TBase):
    """
    Attributes:
     - dbName
     - tableName
     - txnIds
     - replPolicy
     - srcTxnToWriteIdList
    """

    __slots__ = (
        'dbName',
        'tableName',
        'txnIds',
        'replPolicy',
        'srcTxnToWriteIdList',
    )


    def __init__(self, dbName=None, tableName=None, txnIds=None, replPolicy=None, srcTxnToWriteIdList=None,):
        self.dbName = dbName
        self.tableName = tableName
        self.txnIds = txnIds
        self.replPolicy = replPolicy
        self.srcTxnToWriteIdList = srcTxnToWriteIdList


class TxnToWriteId(TBase):
    """
    Attributes:
     - txnId
     - writeId
    """

    __slots__ = (
        'txnId',
        'writeId',
    )


    def __init__(self, txnId=None, writeId=None,):
        self.txnId = txnId
        self.writeId = writeId


class AllocateTableWriteIdsResponse(TBase):
    """
    Attributes:
     - txnToWriteIds
    """

    __slots__ = (
        'txnToWriteIds',
    )


    def __init__(self, txnToWriteIds=None,):
        self.txnToWriteIds = txnToWriteIds


class LockComponent(TBase):
    """
    Attributes:
     - type
     - level
     - dbname
     - tablename
     - partitionname
     - operationType
     - isTransactional
     - isDynamicPartitionWrite
    """

    __slots__ = (
        'type',
        'level',
        'dbname',
        'tablename',
        'partitionname',
        'operationType',
        'isTransactional',
        'isDynamicPartitionWrite',
    )


    def __init__(self, type=None, level=None, dbname=None, tablename=None, partitionname=None, operationType=5, isTransactional=False, isDynamicPartitionWrite=False,):
        self.type = type
        self.level = level
        self.dbname = dbname
        self.tablename = tablename
        self.partitionname = partitionname
        self.operationType = operationType
        self.isTransactional = isTransactional
        self.isDynamicPartitionWrite = isDynamicPartitionWrite


class LockRequest(TBase):
    """
    Attributes:
     - component
     - txnid
     - user
     - hostname
     - agentInfo
    """

    __slots__ = (
        'component',
        'txnid',
        'user',
        'hostname',
        'agentInfo',
    )


    def __init__(self, component=None, txnid=None, user=None, hostname=None, agentInfo="Unknown",):
        self.component = component
        self.txnid = txnid
        self.user = user
        self.hostname = hostname
        self.agentInfo = agentInfo


class LockResponse(TBase):
    """
    Attributes:
     - lockid
     - state
    """

    __slots__ = (
        'lockid',
        'state',
    )


    def __init__(self, lockid=None, state=None,):
        self.lockid = lockid
        self.state = state


class CheckLockRequest(TBase):
    """
    Attributes:
     - lockid
     - txnid
     - elapsed_ms
    """

    __slots__ = (
        'lockid',
        'txnid',
        'elapsed_ms',
    )


    def __init__(self, lockid=None, txnid=None, elapsed_ms=None,):
        self.lockid = lockid
        self.txnid = txnid
        self.elapsed_ms = elapsed_ms


class UnlockRequest(TBase):
    """
    Attributes:
     - lockid
    """

    __slots__ = (
        'lockid',
    )


    def __init__(self, lockid=None,):
        self.lockid = lockid


class ShowLocksRequest(TBase):
    """
    Attributes:
     - dbname
     - tablename
     - partname
     - isExtended
    """

    __slots__ = (
        'dbname',
        'tablename',
        'partname',
        'isExtended',
    )


    def __init__(self, dbname=None, tablename=None, partname=None, isExtended=False,):
        self.dbname = dbname
        self.tablename = tablename
        self.partname = partname
        self.isExtended = isExtended


class ShowLocksResponseElement(TBase):
    """
    Attributes:
     - lockid
     - dbname
     - tablename
     - partname
     - state
     - type
     - txnid
     - lastheartbeat
     - acquiredat
     - user
     - hostname
     - heartbeatCount
     - agentInfo
     - blockedByExtId
     - blockedByIntId
     - lockIdInternal
    """

    __slots__ = (
        'lockid',
        'dbname',
        'tablename',
        'partname',
        'state',
        'type',
        'txnid',
        'lastheartbeat',
        'acquiredat',
        'user',
        'hostname',
        'heartbeatCount',
        'agentInfo',
        'blockedByExtId',
        'blockedByIntId',
        'lockIdInternal',
    )


    def __init__(self, lockid=None, dbname=None, tablename=None, partname=None, state=None, type=None, txnid=None, lastheartbeat=None, acquiredat=None, user=None, hostname=None, heartbeatCount=0, agentInfo=None, blockedByExtId=None, blockedByIntId=None, lockIdInternal=None,):
        self.lockid = lockid
        self.dbname = dbname
        self.tablename = tablename
        self.partname = partname
        self.state = state
        self.type = type
        self.txnid = txnid
        self.lastheartbeat = lastheartbeat
        self.acquiredat = acquiredat
        self.user = user
        self.hostname = hostname
        self.heartbeatCount = heartbeatCount
        self.agentInfo = agentInfo
        self.blockedByExtId = blockedByExtId
        self.blockedByIntId = blockedByIntId
        self.lockIdInternal = lockIdInternal


class ShowLocksResponse(TBase):
    """
    Attributes:
     - locks
    """

    __slots__ = (
        'locks',
    )


    def __init__(self, locks=None,):
        self.locks = locks


class HeartbeatRequest(TBase):
    """
    Attributes:
     - lockid
     - txnid
    """

    __slots__ = (
        'lockid',
        'txnid',
    )


    def __init__(self, lockid=None, txnid=None,):
        self.lockid = lockid
        self.txnid = txnid


class HeartbeatTxnRangeRequest(TBase):
    """
    Attributes:
     - min
     - max
    """

    __slots__ = (
        'min',
        'max',
    )


    def __init__(self, min=None, max=None,):
        self.min = min
        self.max = max


class HeartbeatTxnRangeResponse(TBase):
    """
    Attributes:
     - aborted
     - nosuch
    """

    __slots__ = (
        'aborted',
        'nosuch',
    )


    def __init__(self, aborted=None, nosuch=None,):
        self.aborted = aborted
        self.nosuch = nosuch


class CompactionRequest(TBase):
    """
    Attributes:
     - dbname
     - tablename
     - partitionname
     - type
     - runas
     - properties
    """

    __slots__ = (
        'dbname',
        'tablename',
        'partitionname',
        'type',
        'runas',
        'properties',
    )


    def __init__(self, dbname=None, tablename=None, partitionname=None, type=None, runas=None, properties=None,):
        self.dbname = dbname
        self.tablename = tablename
        self.partitionname = partitionname
        self.type = type
        self.runas = runas
        self.properties = properties


class CompactionResponse(TBase):
    """
    Attributes:
     - id
     - state
     - accepted
    """

    __slots__ = (
        'id',
        'state',
        'accepted',
    )


    def __init__(self, id=None, state=None, accepted=None,):
        self.id = id
        self.state = state
        self.accepted = accepted


class ShowCompactRequest(TBase):

    __slots__ = (
    )



class ShowCompactResponseElement(TBase):
    """
    Attributes:
     - dbname
     - tablename
     - partitionname
     - type
     - state
     - workerid
     - start
     - runAs
     - hightestTxnId
     - metaInfo
     - endTime
     - hadoopJobId
     - id
    """

    __slots__ = (
        'dbname',
        'tablename',
        'partitionname',
        'type',
        'state',
        'workerid',
        'start',
        'runAs',
        'hightestTxnId',
        'metaInfo',
        'endTime',
        'hadoopJobId',
        'id',
    )


    def __init__(self, dbname=None, tablename=None, partitionname=None, type=None, state=None, workerid=None, start=None, runAs=None, hightestTxnId=None, metaInfo=None, endTime=None, hadoopJobId="None", id=None,):
        self.dbname = dbname
        self.tablename = tablename
        self.partitionname = partitionname
        self.type = type
        self.state = state
        self.workerid = workerid
        self.start = start
        self.runAs = runAs
        self.hightestTxnId = hightestTxnId
        self.metaInfo = metaInfo
        self.endTime = endTime
        self.hadoopJobId = hadoopJobId
        self.id = id


class ShowCompactResponse(TBase):
    """
    Attributes:
     - compacts
    """

    __slots__ = (
        'compacts',
    )


    def __init__(self, compacts=None,):
        self.compacts = compacts


class AddDynamicPartitions(TBase):
    """
    Attributes:
     - txnid
     - writeid
     - dbname
     - tablename
     - partitionnames
     - operationType
    """

    __slots__ = (
        'txnid',
        'writeid',
        'dbname',
        'tablename',
        'partitionnames',
        'operationType',
    )


    def __init__(self, txnid=None, writeid=None, dbname=None, tablename=None, partitionnames=None, operationType=5,):
        self.txnid = txnid
        self.writeid = writeid
        self.dbname = dbname
        self.tablename = tablename
        self.partitionnames = partitionnames
        self.operationType = operationType


class BasicTxnInfo(TBase):
    """
    Attributes:
     - isnull
     - time
     - txnid
     - dbname
     - tablename
     - partitionname
    """

    __slots__ = (
        'isnull',
        'time',
        'txnid',
        'dbname',
        'tablename',
        'partitionname',
    )


    def __init__(self, isnull=None, time=None, txnid=None, dbname=None, tablename=None, partitionname=None,):
        self.isnull = isnull
        self.time = time
        self.txnid = txnid
        self.dbname = dbname
        self.tablename = tablename
        self.partitionname = partitionname


class CreationMetadata(TBase):
    """
    Attributes:
     - catName
     - dbName
     - tblName
     - tablesUsed
     - validTxnList
     - materializationTime
    """

    __slots__ = (
        'catName',
        'dbName',
        'tblName',
        'tablesUsed',
        'validTxnList',
        'materializationTime',
    )


    def __init__(self, catName=None, dbName=None, tblName=None, tablesUsed=None, validTxnList=None, materializationTime=None,):
        self.catName = catName
        self.dbName = dbName
        self.tblName = tblName
        self.tablesUsed = tablesUsed
        self.validTxnList = validTxnList
        self.materializationTime = materializationTime


class NotificationEventRequest(TBase):
    """
    Attributes:
     - lastEvent
     - maxEvents
    """

    __slots__ = (
        'lastEvent',
        'maxEvents',
    )


    def __init__(self, lastEvent=None, maxEvents=None,):
        self.lastEvent = lastEvent
        self.maxEvents = maxEvents


class NotificationEvent(TBase):
    """
    Attributes:
     - eventId
     - eventTime
     - eventType
     - dbName
     - tableName
     - message
     - messageFormat
     - catName
    """

    __slots__ = (
        'eventId',
        'eventTime',
        'eventType',
        'dbName',
        'tableName',
        'message',
        'messageFormat',
        'catName',
    )


    def __init__(self, eventId=None, eventTime=None, eventType=None, dbName=None, tableName=None, message=None, messageFormat=None, catName=None,):
        self.eventId = eventId
        self.eventTime = eventTime
        self.eventType = eventType
        self.dbName = dbName
        self.tableName = tableName
        self.message = message
        self.messageFormat = messageFormat
        self.catName = catName


class NotificationEventResponse(TBase):
    """
    Attributes:
     - events
    """

    __slots__ = (
        'events',
    )


    def __init__(self, events=None,):
        self.events = events


class CurrentNotificationEventId(TBase):
    """
    Attributes:
     - eventId
    """

    __slots__ = (
        'eventId',
    )


    def __init__(self, eventId=None,):
        self.eventId = eventId


class NotificationEventsCountRequest(TBase):
    """
    Attributes:
     - fromEventId
     - dbName
     - catName
    """

    __slots__ = (
        'fromEventId',
        'dbName',
        'catName',
    )


    def __init__(self, fromEventId=None, dbName=None, catName=None,):
        self.fromEventId = fromEventId
        self.dbName = dbName
        self.catName = catName


class NotificationEventsCountResponse(TBase):
    """
    Attributes:
     - eventsCount
    """

    __slots__ = (
        'eventsCount',
    )


    def __init__(self, eventsCount=None,):
        self.eventsCount = eventsCount


class InsertEventRequestData(TBase):
    """
    Attributes:
     - replace
     - filesAdded
     - filesAddedChecksum
    """

    __slots__ = (
        'replace',
        'filesAdded',
        'filesAddedChecksum',
    )


    def __init__(self, replace=None, filesAdded=None, filesAddedChecksum=None,):
        self.replace = replace
        self.filesAdded = filesAdded
        self.filesAddedChecksum = filesAddedChecksum


class FireEventRequestData(TBase):
    """
    Attributes:
     - insertData
    """

    __slots__ = (
        'insertData',
    )


    def __init__(self, insertData=None,):
        self.insertData = insertData


class FireEventRequest(TBase):
    """
    Attributes:
     - successful
     - data
     - dbName
     - tableName
     - partitionVals
     - catName
    """

    __slots__ = (
        'successful',
        'data',
        'dbName',
        'tableName',
        'partitionVals',
        'catName',
    )


    def __init__(self, successful=None, data=None, dbName=None, tableName=None, partitionVals=None, catName=None,):
        self.successful = successful
        self.data = data
        self.dbName = dbName
        self.tableName = tableName
        self.partitionVals = partitionVals
        self.catName = catName


class FireEventResponse(TBase):

    __slots__ = (
    )



class MetadataPpdResult(TBase):
    """
    Attributes:
     - metadata
     - includeBitset
    """

    __slots__ = (
        'metadata',
        'includeBitset',
    )


    def __init__(self, metadata=None, includeBitset=None,):
        self.metadata = metadata
        self.includeBitset = includeBitset


class GetFileMetadataByExprResult(TBase):
    """
    Attributes:
     - metadata
     - isSupported
    """

    __slots__ = (
        'metadata',
        'isSupported',
    )


    def __init__(self, metadata=None, isSupported=None,):
        self.metadata = metadata
        self.isSupported = isSupported


class GetFileMetadataByExprRequest(TBase):
    """
    Attributes:
     - fileIds
     - expr
     - doGetFooters
     - type
    """

    __slots__ = (
        'fileIds',
        'expr',
        'doGetFooters',
        'type',
    )


    def __init__(self, fileIds=None, expr=None, doGetFooters=None, type=None,):
        self.fileIds = fileIds
        self.expr = expr
        self.doGetFooters = doGetFooters
        self.type = type


class GetFileMetadataResult(TBase):
    """
    Attributes:
     - metadata
     - isSupported
    """

    __slots__ = (
        'metadata',
        'isSupported',
    )


    def __init__(self, metadata=None, isSupported=None,):
        self.metadata = metadata
        self.isSupported = isSupported


class GetFileMetadataRequest(TBase):
    """
    Attributes:
     - fileIds
    """

    __slots__ = (
        'fileIds',
    )


    def __init__(self, fileIds=None,):
        self.fileIds = fileIds


class PutFileMetadataResult(TBase):

    __slots__ = (
    )



class PutFileMetadataRequest(TBase):
    """
    Attributes:
     - fileIds
     - metadata
     - type
    """

    __slots__ = (
        'fileIds',
        'metadata',
        'type',
    )


    def __init__(self, fileIds=None, metadata=None, type=None,):
        self.fileIds = fileIds
        self.metadata = metadata
        self.type = type


class ClearFileMetadataResult(TBase):

    __slots__ = (
    )



class ClearFileMetadataRequest(TBase):
    """
    Attributes:
     - fileIds
    """

    __slots__ = (
        'fileIds',
    )


    def __init__(self, fileIds=None,):
        self.fileIds = fileIds


class CacheFileMetadataResult(TBase):
    """
    Attributes:
     - isSupported
    """

    __slots__ = (
        'isSupported',
    )


    def __init__(self, isSupported=None,):
        self.isSupported = isSupported


class CacheFileMetadataRequest(TBase):
    """
    Attributes:
     - dbName
     - tblName
     - partName
     - isAllParts
    """

    __slots__ = (
        'dbName',
        'tblName',
        'partName',
        'isAllParts',
    )


    def __init__(self, dbName=None, tblName=None, partName=None, isAllParts=None,):
        self.dbName = dbName
        self.tblName = tblName
        self.partName = partName
        self.isAllParts = isAllParts


class GetAllFunctionsResponse(TBase):
    """
    Attributes:
     - functions
    """

    __slots__ = (
        'functions',
    )


    def __init__(self, functions=None,):
        self.functions = functions


class ClientCapabilities(TBase):
    """
    Attributes:
     - values
    """

    __slots__ = (
        'values',
    )


    def __init__(self, values=None,):
        self.values = values


class GetTableRequest(TBase):
    """
    Attributes:
     - dbName
     - tblName
     - capabilities
     - catName
    """

    __slots__ = (
        'dbName',
        'tblName',
        'capabilities',
        'catName',
    )


    def __init__(self, dbName=None, tblName=None, capabilities=None, catName=None,):
        self.dbName = dbName
        self.tblName = tblName
        self.capabilities = capabilities
        self.catName = catName


class GetTableResult(TBase):
    """
    Attributes:
     - table
    """

    __slots__ = (
        'table',
    )


    def __init__(self, table=None,):
        self.table = table


class GetTablesRequest(TBase):
    """
    Attributes:
     - dbName
     - tblNames
     - capabilities
     - catName
    """

    __slots__ = (
        'dbName',
        'tblNames',
        'capabilities',
        'catName',
    )


    def __init__(self, dbName=None, tblNames=None, capabilities=None, catName=None,):
        self.dbName = dbName
        self.tblNames = tblNames
        self.capabilities = capabilities
        self.catName = catName


class GetTablesResult(TBase):
    """
    Attributes:
     - tables
    """

    __slots__ = (
        'tables',
    )


    def __init__(self, tables=None,):
        self.tables = tables


class CmRecycleRequest(TBase):
    """
    Attributes:
     - dataPath
     - purge
    """

    __slots__ = (
        'dataPath',
        'purge',
    )


    def __init__(self, dataPath=None, purge=None,):
        self.dataPath = dataPath
        self.purge = purge


class CmRecycleResponse(TBase):

    __slots__ = (
    )



class TableMeta(TBase):
    """
    Attributes:
     - dbName
     - tableName
     - tableType
     - comments
     - catName
    """

    __slots__ = (
        'dbName',
        'tableName',
        'tableType',
        'comments',
        'catName',
    )


    def __init__(self, dbName=None, tableName=None, tableType=None, comments=None, catName=None,):
        self.dbName = dbName
        self.tableName = tableName
        self.tableType = tableType
        self.comments = comments
        self.catName = catName


class Materialization(TBase):
    """
    Attributes:
     - sourceTablesUpdateDeleteModified
    """

    __slots__ = (
        'sourceTablesUpdateDeleteModified',
    )


    def __init__(self, sourceTablesUpdateDeleteModified=None,):
        self.sourceTablesUpdateDeleteModified = sourceTablesUpdateDeleteModified


class WMResourcePlan(TBase):
    """
    Attributes:
     - name
     - status
     - queryParallelism
     - defaultPoolPath
    """

    __slots__ = (
        'name',
        'status',
        'queryParallelism',
        'defaultPoolPath',
    )


    def __init__(self, name=None, status=None, queryParallelism=None, defaultPoolPath=None,):
        self.name = name
        self.status = status
        self.queryParallelism = queryParallelism
        self.defaultPoolPath = defaultPoolPath


class WMNullableResourcePlan(TBase):
    """
    Attributes:
     - name
     - status
     - queryParallelism
     - isSetQueryParallelism
     - defaultPoolPath
     - isSetDefaultPoolPath
    """

    __slots__ = (
        'name',
        'status',
        'queryParallelism',
        'isSetQueryParallelism',
        'defaultPoolPath',
        'isSetDefaultPoolPath',
    )


    def __init__(self, name=None, status=None, queryParallelism=None, isSetQueryParallelism=None, defaultPoolPath=None, isSetDefaultPoolPath=None,):
        self.name = name
        self.status = status
        self.queryParallelism = queryParallelism
        self.isSetQueryParallelism = isSetQueryParallelism
        self.defaultPoolPath = defaultPoolPath
        self.isSetDefaultPoolPath = isSetDefaultPoolPath


class WMPool(TBase):
    """
    Attributes:
     - resourcePlanName
     - poolPath
     - allocFraction
     - queryParallelism
     - schedulingPolicy
    """

    __slots__ = (
        'resourcePlanName',
        'poolPath',
        'allocFraction',
        'queryParallelism',
        'schedulingPolicy',
    )


    def __init__(self, resourcePlanName=None, poolPath=None, allocFraction=None, queryParallelism=None, schedulingPolicy=None,):
        self.resourcePlanName = resourcePlanName
        self.poolPath = poolPath
        self.allocFraction = allocFraction
        self.queryParallelism = queryParallelism
        self.schedulingPolicy = schedulingPolicy


class WMNullablePool(TBase):
    """
    Attributes:
     - resourcePlanName
     - poolPath
     - allocFraction
     - queryParallelism
     - schedulingPolicy
     - isSetSchedulingPolicy
    """

    __slots__ = (
        'resourcePlanName',
        'poolPath',
        'allocFraction',
        'queryParallelism',
        'schedulingPolicy',
        'isSetSchedulingPolicy',
    )


    def __init__(self, resourcePlanName=None, poolPath=None, allocFraction=None, queryParallelism=None, schedulingPolicy=None, isSetSchedulingPolicy=None,):
        self.resourcePlanName = resourcePlanName
        self.poolPath = poolPath
        self.allocFraction = allocFraction
        self.queryParallelism = queryParallelism
        self.schedulingPolicy = schedulingPolicy
        self.isSetSchedulingPolicy = isSetSchedulingPolicy


class WMTrigger(TBase):
    """
    Attributes:
     - resourcePlanName
     - triggerName
     - triggerExpression
     - actionExpression
     - isInUnmanaged
    """

    __slots__ = (
        'resourcePlanName',
        'triggerName',
        'triggerExpression',
        'actionExpression',
        'isInUnmanaged',
    )


    def __init__(self, resourcePlanName=None, triggerName=None, triggerExpression=None, actionExpression=None, isInUnmanaged=None,):
        self.resourcePlanName = resourcePlanName
        self.triggerName = triggerName
        self.triggerExpression = triggerExpression
        self.actionExpression = actionExpression
        self.isInUnmanaged = isInUnmanaged


class WMMapping(TBase):
    """
    Attributes:
     - resourcePlanName
     - entityType
     - entityName
     - poolPath
     - ordering
    """

    __slots__ = (
        'resourcePlanName',
        'entityType',
        'entityName',
        'poolPath',
        'ordering',
    )


    def __init__(self, resourcePlanName=None, entityType=None, entityName=None, poolPath=None, ordering=None,):
        self.resourcePlanName = resourcePlanName
        self.entityType = entityType
        self.entityName = entityName
        self.poolPath = poolPath
        self.ordering = ordering


class WMPoolTrigger(TBase):
    """
    Attributes:
     - pool
     - trigger
    """

    __slots__ = (
        'pool',
        'trigger',
    )


    def __init__(self, pool=None, trigger=None,):
        self.pool = pool
        self.trigger = trigger


class WMFullResourcePlan(TBase):
    """
    Attributes:
     - plan
     - pools
     - mappings
     - triggers
     - poolTriggers
    """

    __slots__ = (
        'plan',
        'pools',
        'mappings',
        'triggers',
        'poolTriggers',
    )


    def __init__(self, plan=None, pools=None, mappings=None, triggers=None, poolTriggers=None,):
        self.plan = plan
        self.pools = pools
        self.mappings = mappings
        self.triggers = triggers
        self.poolTriggers = poolTriggers


class WMCreateResourcePlanRequest(TBase):
    """
    Attributes:
     - resourcePlan
     - copyFrom
    """

    __slots__ = (
        'resourcePlan',
        'copyFrom',
    )


    def __init__(self, resourcePlan=None, copyFrom=None,):
        self.resourcePlan = resourcePlan
        self.copyFrom = copyFrom


class WMCreateResourcePlanResponse(TBase):

    __slots__ = (
    )



class WMGetActiveResourcePlanRequest(TBase):

    __slots__ = (
    )



class WMGetActiveResourcePlanResponse(TBase):
    """
    Attributes:
     - resourcePlan
    """

    __slots__ = (
        'resourcePlan',
    )


    def __init__(self, resourcePlan=None,):
        self.resourcePlan = resourcePlan


class WMGetResourcePlanRequest(TBase):
    """
    Attributes:
     - resourcePlanName
    """

    __slots__ = (
        'resourcePlanName',
    )


    def __init__(self, resourcePlanName=None,):
        self.resourcePlanName = resourcePlanName


class WMGetResourcePlanResponse(TBase):
    """
    Attributes:
     - resourcePlan
    """

    __slots__ = (
        'resourcePlan',
    )


    def __init__(self, resourcePlan=None,):
        self.resourcePlan = resourcePlan


class WMGetAllResourcePlanRequest(TBase):

    __slots__ = (
    )



class WMGetAllResourcePlanResponse(TBase):
    """
    Attributes:
     - resourcePlans
    """

    __slots__ = (
        'resourcePlans',
    )


    def __init__(self, resourcePlans=None,):
        self.resourcePlans = resourcePlans


class WMAlterResourcePlanRequest(TBase):
    """
    Attributes:
     - resourcePlanName
     - resourcePlan
     - isEnableAndActivate
     - isForceDeactivate
     - isReplace
    """

    __slots__ = (
        'resourcePlanName',
        'resourcePlan',
        'isEnableAndActivate',
        'isForceDeactivate',
        'isReplace',
    )


    def __init__(self, resourcePlanName=None, resourcePlan=None, isEnableAndActivate=None, isForceDeactivate=None, isReplace=None,):
        self.resourcePlanName = resourcePlanName
        self.resourcePlan = resourcePlan
        self.isEnableAndActivate = isEnableAndActivate
        self.isForceDeactivate = isForceDeactivate
        self.isReplace = isReplace


class WMAlterResourcePlanResponse(TBase):
    """
    Attributes:
     - fullResourcePlan
    """

    __slots__ = (
        'fullResourcePlan',
    )


    def __init__(self, fullResourcePlan=None,):
        self.fullResourcePlan = fullResourcePlan


class WMValidateResourcePlanRequest(TBase):
    """
    Attributes:
     - resourcePlanName
    """

    __slots__ = (
        'resourcePlanName',
    )


    def __init__(self, resourcePlanName=None,):
        self.resourcePlanName = resourcePlanName


class WMValidateResourcePlanResponse(TBase):
    """
    Attributes:
     - errors
     - warnings
    """

    __slots__ = (
        'errors',
        'warnings',
    )


    def __init__(self, errors=None, warnings=None,):
        self.errors = errors
        self.warnings = warnings


class WMDropResourcePlanRequest(TBase):
    """
    Attributes:
     - resourcePlanName
    """

    __slots__ = (
        'resourcePlanName',
    )


    def __init__(self, resourcePlanName=None,):
        self.resourcePlanName = resourcePlanName


class WMDropResourcePlanResponse(TBase):

    __slots__ = (
    )



class WMCreateTriggerRequest(TBase):
    """
    Attributes:
     - trigger
    """

    __slots__ = (
        'trigger',
    )


    def __init__(self, trigger=None,):
        self.trigger = trigger


class WMCreateTriggerResponse(TBase):

    __slots__ = (
    )



class WMAlterTriggerRequest(TBase):
    """
    Attributes:
     - trigger
    """

    __slots__ = (
        'trigger',
    )


    def __init__(self, trigger=None,):
        self.trigger = trigger


class WMAlterTriggerResponse(TBase):

    __slots__ = (
    )



class WMDropTriggerRequest(TBase):
    """
    Attributes:
     - resourcePlanName
     - triggerName
    """

    __slots__ = (
        'resourcePlanName',
        'triggerName',
    )


    def __init__(self, resourcePlanName=None, triggerName=None,):
        self.resourcePlanName = resourcePlanName
        self.triggerName = triggerName


class WMDropTriggerResponse(TBase):

    __slots__ = (
    )



class WMGetTriggersForResourePlanRequest(TBase):
    """
    Attributes:
     - resourcePlanName
    """

    __slots__ = (
        'resourcePlanName',
    )


    def __init__(self, resourcePlanName=None,):
        self.resourcePlanName = resourcePlanName


class WMGetTriggersForResourePlanResponse(TBase):
    """
    Attributes:
     - triggers
    """

    __slots__ = (
        'triggers',
    )


    def __init__(self, triggers=None,):
        self.triggers = triggers


class WMCreatePoolRequest(TBase):
    """
    Attributes:
     - pool
    """

    __slots__ = (
        'pool',
    )


    def __init__(self, pool=None,):
        self.pool = pool


class WMCreatePoolResponse(TBase):

    __slots__ = (
    )



class WMAlterPoolRequest(TBase):
    """
    Attributes:
     - pool
     - poolPath
    """

    __slots__ = (
        'pool',
        'poolPath',
    )


    def __init__(self, pool=None, poolPath=None,):
        self.pool = pool
        self.poolPath = poolPath


class WMAlterPoolResponse(TBase):

    __slots__ = (
    )



class WMDropPoolRequest(TBase):
    """
    Attributes:
     - resourcePlanName
     - poolPath
    """

    __slots__ = (
        'resourcePlanName',
        'poolPath',
    )


    def __init__(self, resourcePlanName=None, poolPath=None,):
        self.resourcePlanName = resourcePlanName
        self.poolPath = poolPath


class WMDropPoolResponse(TBase):

    __slots__ = (
    )



class WMCreateOrUpdateMappingRequest(TBase):
    """
    Attributes:
     - mapping
     - update
    """

    __slots__ = (
        'mapping',
        'update',
    )


    def __init__(self, mapping=None, update=None,):
        self.mapping = mapping
        self.update = update


class WMCreateOrUpdateMappingResponse(TBase):

    __slots__ = (
    )



class WMDropMappingRequest(TBase):
    """
    Attributes:
     - mapping
    """

    __slots__ = (
        'mapping',
    )


    def __init__(self, mapping=None,):
        self.mapping = mapping


class WMDropMappingResponse(TBase):

    __slots__ = (
    )



class WMCreateOrDropTriggerToPoolMappingRequest(TBase):
    """
    Attributes:
     - resourcePlanName
     - triggerName
     - poolPath
     - drop
    """

    __slots__ = (
        'resourcePlanName',
        'triggerName',
        'poolPath',
        'drop',
    )


    def __init__(self, resourcePlanName=None, triggerName=None, poolPath=None, drop=None,):
        self.resourcePlanName = resourcePlanName
        self.triggerName = triggerName
        self.poolPath = poolPath
        self.drop = drop


class WMCreateOrDropTriggerToPoolMappingResponse(TBase):

    __slots__ = (
    )



class ISchema(TBase):
    """
    Attributes:
     - schemaType
     - name
     - catName
     - dbName
     - compatibility
     - validationLevel
     - canEvolve
     - schemaGroup
     - description
    """

    __slots__ = (
        'schemaType',
        'name',
        'catName',
        'dbName',
        'compatibility',
        'validationLevel',
        'canEvolve',
        'schemaGroup',
        'description',
    )


    def __init__(self, schemaType=None, name=None, catName=None, dbName=None, compatibility=None, validationLevel=None, canEvolve=None, schemaGroup=None, description=None,):
        self.schemaType = schemaType
        self.name = name
        self.catName = catName
        self.dbName = dbName
        self.compatibility = compatibility
        self.validationLevel = validationLevel
        self.canEvolve = canEvolve
        self.schemaGroup = schemaGroup
        self.description = description


class ISchemaName(TBase):
    """
    Attributes:
     - catName
     - dbName
     - schemaName
    """

    __slots__ = (
        'catName',
        'dbName',
        'schemaName',
    )


    def __init__(self, catName=None, dbName=None, schemaName=None,):
        self.catName = catName
        self.dbName = dbName
        self.schemaName = schemaName


class AlterISchemaRequest(TBase):
    """
    Attributes:
     - name
     - newSchema
    """

    __slots__ = (
        'name',
        'newSchema',
    )


    def __init__(self, name=None, newSchema=None,):
        self.name = name
        self.newSchema = newSchema


class SchemaVersion(TBase):
    """
    Attributes:
     - schema
     - version
     - createdAt
     - cols
     - state
     - description
     - schemaText
     - fingerprint
     - name
     - serDe
    """

    __slots__ = (
        'schema',
        'version',
        'createdAt',
        'cols',
        'state',
        'description',
        'schemaText',
        'fingerprint',
        'name',
        'serDe',
    )


    def __init__(self, schema=None, version=None, createdAt=None, cols=None, state=None, description=None, schemaText=None, fingerprint=None, name=None, serDe=None,):
        self.schema = schema
        self.version = version
        self.createdAt = createdAt
        self.cols = cols
        self.state = state
        self.description = description
        self.schemaText = schemaText
        self.fingerprint = fingerprint
        self.name = name
        self.serDe = serDe


class SchemaVersionDescriptor(TBase):
    """
    Attributes:
     - schema
     - version
    """

    __slots__ = (
        'schema',
        'version',
    )


    def __init__(self, schema=None, version=None,):
        self.schema = schema
        self.version = version


class FindSchemasByColsRqst(TBase):
    """
    Attributes:
     - colName
     - colNamespace
     - type
    """

    __slots__ = (
        'colName',
        'colNamespace',
        'type',
    )


    def __init__(self, colName=None, colNamespace=None, type=None,):
        self.colName = colName
        self.colNamespace = colNamespace
        self.type = type


class FindSchemasByColsResp(TBase):
    """
    Attributes:
     - schemaVersions
    """

    __slots__ = (
        'schemaVersions',
    )


    def __init__(self, schemaVersions=None,):
        self.schemaVersions = schemaVersions


class MapSchemaVersionToSerdeRequest(TBase):
    """
    Attributes:
     - schemaVersion
     - serdeName
    """

    __slots__ = (
        'schemaVersion',
        'serdeName',
    )


    def __init__(self, schemaVersion=None, serdeName=None,):
        self.schemaVersion = schemaVersion
        self.serdeName = serdeName


class SetSchemaVersionStateRequest(TBase):
    """
    Attributes:
     - schemaVersion
     - state
    """

    __slots__ = (
        'schemaVersion',
        'state',
    )


    def __init__(self, schemaVersion=None, state=None,):
        self.schemaVersion = schemaVersion
        self.state = state


class GetSerdeRequest(TBase):
    """
    Attributes:
     - serdeName
    """

    __slots__ = (
        'serdeName',
    )


    def __init__(self, serdeName=None,):
        self.serdeName = serdeName


class RuntimeStat(TBase):
    """
    Attributes:
     - createTime
     - weight
     - payload
    """

    __slots__ = (
        'createTime',
        'weight',
        'payload',
    )


    def __init__(self, createTime=None, weight=None, payload=None,):
        self.createTime = createTime
        self.weight = weight
        self.payload = payload


class GetRuntimeStatsRequest(TBase):
    """
    Attributes:
     - maxWeight
     - maxCreateTime
    """

    __slots__ = (
        'maxWeight',
        'maxCreateTime',
    )


    def __init__(self, maxWeight=None, maxCreateTime=None,):
        self.maxWeight = maxWeight
        self.maxCreateTime = maxCreateTime


class MetaException(TExceptionBase):
    """
    Attributes:
     - message
    """

    __slots__ = (
        'message',
    )


    def __init__(self, message=None,):
        self.message = message

    def __str__(self):
        return repr(self)


class UnknownTableException(TExceptionBase):
    """
    Attributes:
     - message
    """

    __slots__ = (
        'message',
    )


    def __init__(self, message=None,):
        self.message = message

    def __str__(self):
        return repr(self)


class UnknownDBException(TExceptionBase):
    """
    Attributes:
     - message
    """

    __slots__ = (
        'message',
    )


    def __init__(self, message=None,):
        self.message = message

    def __str__(self):
        return repr(self)


class AlreadyExistsException(TExceptionBase):
    """
    Attributes:
     - message
    """

    __slots__ = (
        'message',
    )


    def __init__(self, message=None,):
        self.message = message

    def __str__(self):
        return repr(self)


class InvalidPartitionException(TExceptionBase):
    """
    Attributes:
     - message
    """

    __slots__ = (
        'message',
    )


    def __init__(self, message=None,):
        self.message = message

    def __str__(self):
        return repr(self)


class UnknownPartitionException(TExceptionBase):
    """
    Attributes:
     - message
    """

    __slots__ = (
        'message',
    )


    def __init__(self, message=None,):
        self.message = message

    def __str__(self):
        return repr(self)


class InvalidObjectException(TExceptionBase):
    """
    Attributes:
     - message
    """

    __slots__ = (
        'message',
    )


    def __init__(self, message=None,):
        self.message = message

    def __str__(self):
        return repr(self)


class NoSuchObjectException(TExceptionBase):
    """
    Attributes:
     - message
    """

    __slots__ = (
        'message',
    )


    def __init__(self, message=None,):
        self.message = message

    def __str__(self):
        return repr(self)


class InvalidOperationException(TExceptionBase):
    """
    Attributes:
     - message
    """

    __slots__ = (
        'message',
    )


    def __init__(self, message=None,):
        self.message = message

    def __str__(self):
        return repr(self)


class ConfigValSecurityException(TExceptionBase):
    """
    Attributes:
     - message
    """

    __slots__ = (
        'message',
    )


    def __init__(self, message=None,):
        self.message = message

    def __str__(self):
        return repr(self)


class InvalidInputException(TExceptionBase):
    """
    Attributes:
     - message
    """

    __slots__ = (
        'message',
    )


    def __init__(self, message=None,):
        self.message = message

    def __str__(self):
        return repr(self)


class NoSuchTxnException(TExceptionBase):
    """
    Attributes:
     - message
    """

    __slots__ = (
        'message',
    )


    def __init__(self, message=None,):
        self.message = message

    def __str__(self):
        return repr(self)


class TxnAbortedException(TExceptionBase):
    """
    Attributes:
     - message
    """

    __slots__ = (
        'message',
    )


    def __init__(self, message=None,):
        self.message = message

    def __str__(self):
        return repr(self)


class TxnOpenException(TExceptionBase):
    """
    Attributes:
     - message
    """

    __slots__ = (
        'message',
    )


    def __init__(self, message=None,):
        self.message = message

    def __str__(self):
        return repr(self)


class NoSuchLockException(TExceptionBase):
    """
    Attributes:
     - message
    """

    __slots__ = (
        'message',
    )


    def __init__(self, message=None,):
        self.message = message

    def __str__(self):
        return repr(self)
all_structs.append(Version)
Version.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'version', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'comments', 'UTF8', None, ),  # 2
)
all_structs.append(FieldSchema)
FieldSchema.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'type', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'comment', 'UTF8', None, ),  # 3
)
all_structs.append(SQLPrimaryKey)
SQLPrimaryKey.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'table_db', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'table_name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'column_name', 'UTF8', None, ),  # 3
    (4, TType.I32, 'key_seq', None, None, ),  # 4
    (5, TType.STRING, 'pk_name', 'UTF8', None, ),  # 5
    (6, TType.BOOL, 'enable_cstr', None, None, ),  # 6
    (7, TType.BOOL, 'validate_cstr', None, None, ),  # 7
    (8, TType.BOOL, 'rely_cstr', None, None, ),  # 8
    (9, TType.STRING, 'catName', 'UTF8', None, ),  # 9
)
all_structs.append(SQLForeignKey)
SQLForeignKey.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'pktable_db', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'pktable_name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'pkcolumn_name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'fktable_db', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'fktable_name', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'fkcolumn_name', 'UTF8', None, ),  # 6
    (7, TType.I32, 'key_seq', None, None, ),  # 7
    (8, TType.I32, 'update_rule', None, None, ),  # 8
    (9, TType.I32, 'delete_rule', None, None, ),  # 9
    (10, TType.STRING, 'fk_name', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'pk_name', 'UTF8', None, ),  # 11
    (12, TType.BOOL, 'enable_cstr', None, None, ),  # 12
    (13, TType.BOOL, 'validate_cstr', None, None, ),  # 13
    (14, TType.BOOL, 'rely_cstr', None, None, ),  # 14
    (15, TType.STRING, 'catName', 'UTF8', None, ),  # 15
)
all_structs.append(SQLUniqueConstraint)
SQLUniqueConstraint.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'catName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'table_db', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'table_name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'column_name', 'UTF8', None, ),  # 4
    (5, TType.I32, 'key_seq', None, None, ),  # 5
    (6, TType.STRING, 'uk_name', 'UTF8', None, ),  # 6
    (7, TType.BOOL, 'enable_cstr', None, None, ),  # 7
    (8, TType.BOOL, 'validate_cstr', None, None, ),  # 8
    (9, TType.BOOL, 'rely_cstr', None, None, ),  # 9
)
all_structs.append(SQLNotNullConstraint)
SQLNotNullConstraint.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'catName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'table_db', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'table_name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'column_name', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'nn_name', 'UTF8', None, ),  # 5
    (6, TType.BOOL, 'enable_cstr', None, None, ),  # 6
    (7, TType.BOOL, 'validate_cstr', None, None, ),  # 7
    (8, TType.BOOL, 'rely_cstr', None, None, ),  # 8
)
all_structs.append(SQLDefaultConstraint)
SQLDefaultConstraint.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'catName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'table_db', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'table_name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'column_name', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'default_value', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'dc_name', 'UTF8', None, ),  # 6
    (7, TType.BOOL, 'enable_cstr', None, None, ),  # 7
    (8, TType.BOOL, 'validate_cstr', None, None, ),  # 8
    (9, TType.BOOL, 'rely_cstr', None, None, ),  # 9
)
all_structs.append(SQLCheckConstraint)
SQLCheckConstraint.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'catName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'table_db', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'table_name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'column_name', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'check_expression', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'dc_name', 'UTF8', None, ),  # 6
    (7, TType.BOOL, 'enable_cstr', None, None, ),  # 7
    (8, TType.BOOL, 'validate_cstr', None, None, ),  # 8
    (9, TType.BOOL, 'rely_cstr', None, None, ),  # 9
)
all_structs.append(Type)
Type.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'type1', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'type2', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'fields', (TType.STRUCT, [FieldSchema, None], False), None, ),  # 4
)
all_structs.append(HiveObjectRef)
HiveObjectRef.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'objectType', None, None, ),  # 1
    (2, TType.STRING, 'dbName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'objectName', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'partValues', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.STRING, 'columnName', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'catName', 'UTF8', None, ),  # 6
)
all_structs.append(PrivilegeGrantInfo)
PrivilegeGrantInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'privilege', 'UTF8', None, ),  # 1
    (2, TType.I32, 'createTime', None, None, ),  # 2
    (3, TType.STRING, 'grantor', 'UTF8', None, ),  # 3
    (4, TType.I32, 'grantorType', None, None, ),  # 4
    (5, TType.BOOL, 'grantOption', None, None, ),  # 5
)
all_structs.append(HiveObjectPrivilege)
HiveObjectPrivilege.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'hiveObject', [HiveObjectRef, None], None, ),  # 1
    (2, TType.STRING, 'principalName', 'UTF8', None, ),  # 2
    (3, TType.I32, 'principalType', None, None, ),  # 3
    (4, TType.STRUCT, 'grantInfo', [PrivilegeGrantInfo, None], None, ),  # 4
    (5, TType.STRING, 'authorizer', 'UTF8', None, ),  # 5
)
all_structs.append(PrivilegeBag)
PrivilegeBag.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'privileges', (TType.STRUCT, [HiveObjectPrivilege, None], False), None, ),  # 1
)
all_structs.append(PrincipalPrivilegeSet)
PrincipalPrivilegeSet.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'userPrivileges', (TType.STRING, 'UTF8', TType.LIST, (TType.STRUCT, [PrivilegeGrantInfo, None], False), False), None, ),  # 1
    (2, TType.MAP, 'groupPrivileges', (TType.STRING, 'UTF8', TType.LIST, (TType.STRUCT, [PrivilegeGrantInfo, None], False), False), None, ),  # 2
    (3, TType.MAP, 'rolePrivileges', (TType.STRING, 'UTF8', TType.LIST, (TType.STRUCT, [PrivilegeGrantInfo, None], False), False), None, ),  # 3
)
all_structs.append(GrantRevokePrivilegeRequest)
GrantRevokePrivilegeRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'requestType', None, None, ),  # 1
    (2, TType.STRUCT, 'privileges', [PrivilegeBag, None], None, ),  # 2
    (3, TType.BOOL, 'revokeGrantOption', None, None, ),  # 3
)
all_structs.append(GrantRevokePrivilegeResponse)
GrantRevokePrivilegeResponse.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'success', None, None, ),  # 1
)
all_structs.append(Role)
Role.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'roleName', 'UTF8', None, ),  # 1
    (2, TType.I32, 'createTime', None, None, ),  # 2
    (3, TType.STRING, 'ownerName', 'UTF8', None, ),  # 3
)
all_structs.append(RolePrincipalGrant)
RolePrincipalGrant.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'roleName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'principalName', 'UTF8', None, ),  # 2
    (3, TType.I32, 'principalType', None, None, ),  # 3
    (4, TType.BOOL, 'grantOption', None, None, ),  # 4
    (5, TType.I32, 'grantTime', None, None, ),  # 5
    (6, TType.STRING, 'grantorName', 'UTF8', None, ),  # 6
    (7, TType.I32, 'grantorPrincipalType', None, None, ),  # 7
)
all_structs.append(GetRoleGrantsForPrincipalRequest)
GetRoleGrantsForPrincipalRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'principal_name', 'UTF8', None, ),  # 1
    (2, TType.I32, 'principal_type', None, None, ),  # 2
)
all_structs.append(GetRoleGrantsForPrincipalResponse)
GetRoleGrantsForPrincipalResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'principalGrants', (TType.STRUCT, [RolePrincipalGrant, None], False), None, ),  # 1
)
all_structs.append(GetPrincipalsInRoleRequest)
GetPrincipalsInRoleRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'roleName', 'UTF8', None, ),  # 1
)
all_structs.append(GetPrincipalsInRoleResponse)
GetPrincipalsInRoleResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'principalGrants', (TType.STRUCT, [RolePrincipalGrant, None], False), None, ),  # 1
)
all_structs.append(GrantRevokeRoleRequest)
GrantRevokeRoleRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'requestType', None, None, ),  # 1
    (2, TType.STRING, 'roleName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'principalName', 'UTF8', None, ),  # 3
    (4, TType.I32, 'principalType', None, None, ),  # 4
    (5, TType.STRING, 'grantor', 'UTF8', None, ),  # 5
    (6, TType.I32, 'grantorType', None, None, ),  # 6
    (7, TType.BOOL, 'grantOption', None, None, ),  # 7
)
all_structs.append(GrantRevokeRoleResponse)
GrantRevokeRoleResponse.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'success', None, None, ),  # 1
)
all_structs.append(Catalog)
Catalog.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'description', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'locationUri', 'UTF8', None, ),  # 3
)
all_structs.append(CreateCatalogRequest)
CreateCatalogRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'catalog', [Catalog, None], None, ),  # 1
)
all_structs.append(AlterCatalogRequest)
AlterCatalogRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'newCat', [Catalog, None], None, ),  # 2
)
all_structs.append(GetCatalogRequest)
GetCatalogRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
)
all_structs.append(GetCatalogResponse)
GetCatalogResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'catalog', [Catalog, None], None, ),  # 1
)
all_structs.append(GetCatalogsResponse)
GetCatalogsResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'names', (TType.STRING, 'UTF8', False), None, ),  # 1
)
all_structs.append(DropCatalogRequest)
DropCatalogRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
)
all_structs.append(Database)
Database.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'description', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'locationUri', 'UTF8', None, ),  # 3
    (4, TType.MAP, 'parameters', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.STRUCT, 'privileges', [PrincipalPrivilegeSet, None], None, ),  # 5
    (6, TType.STRING, 'ownerName', 'UTF8', None, ),  # 6
    (7, TType.I32, 'ownerType', None, None, ),  # 7
    (8, TType.STRING, 'catalogName', 'UTF8', None, ),  # 8
)
all_structs.append(SerDeInfo)
SerDeInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'serializationLib', 'UTF8', None, ),  # 2
    (3, TType.MAP, 'parameters', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.STRING, 'description', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'serializerClass', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'deserializerClass', 'UTF8', None, ),  # 6
    (7, TType.I32, 'serdeType', None, None, ),  # 7
)
all_structs.append(Order)
Order.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'col', 'UTF8', None, ),  # 1
    (2, TType.I32, 'order', None, None, ),  # 2
)
all_structs.append(SkewedInfo)
SkewedInfo.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'skewedColNames', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.LIST, 'skewedColValues', (TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 2
    (3, TType.MAP, 'skewedColValueLocationMaps', (TType.LIST, (TType.STRING, 'UTF8', False), TType.STRING, 'UTF8', False), None, ),  # 3
)
all_structs.append(StorageDescriptor)
StorageDescriptor.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'cols', (TType.STRUCT, [FieldSchema, None], False), None, ),  # 1
    (2, TType.STRING, 'location', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'inputFormat', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'outputFormat', 'UTF8', None, ),  # 4
    (5, TType.BOOL, 'compressed', None, None, ),  # 5
    (6, TType.I32, 'numBuckets', None, None, ),  # 6
    (7, TType.STRUCT, 'serdeInfo', [SerDeInfo, None], None, ),  # 7
    (8, TType.LIST, 'bucketCols', (TType.STRING, 'UTF8', False), None, ),  # 8
    (9, TType.LIST, 'sortCols', (TType.STRUCT, [Order, None], False), None, ),  # 9
    (10, TType.MAP, 'parameters', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 10
    (11, TType.STRUCT, 'skewedInfo', [SkewedInfo, None], None, ),  # 11
    (12, TType.BOOL, 'storedAsSubDirectories', None, None, ),  # 12
)
all_structs.append(Table)
Table.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'tableName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'dbName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'owner', 'UTF8', None, ),  # 3
    (4, TType.I32, 'createTime', None, None, ),  # 4
    (5, TType.I32, 'lastAccessTime', None, None, ),  # 5
    (6, TType.I32, 'retention', None, None, ),  # 6
    (7, TType.STRUCT, 'sd', [StorageDescriptor, None], None, ),  # 7
    (8, TType.LIST, 'partitionKeys', (TType.STRUCT, [FieldSchema, None], False), None, ),  # 8
    (9, TType.MAP, 'parameters', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 9
    (10, TType.STRING, 'viewOriginalText', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'viewExpandedText', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'tableType', 'UTF8', None, ),  # 12
    (13, TType.STRUCT, 'privileges', [PrincipalPrivilegeSet, None], None, ),  # 13
    (14, TType.BOOL, 'temporary', None, False, ),  # 14
    (15, TType.BOOL, 'rewriteEnabled', None, None, ),  # 15
    (16, TType.STRUCT, 'creationMetadata', [CreationMetadata, None], None, ),  # 16
    (17, TType.STRING, 'catName', 'UTF8', None, ),  # 17
    (18, TType.I32, 'ownerType', None, 1, ),  # 18
)
all_structs.append(Partition)
Partition.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'values', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.STRING, 'dbName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'tableName', 'UTF8', None, ),  # 3
    (4, TType.I32, 'createTime', None, None, ),  # 4
    (5, TType.I32, 'lastAccessTime', None, None, ),  # 5
    (6, TType.STRUCT, 'sd', [StorageDescriptor, None], None, ),  # 6
    (7, TType.MAP, 'parameters', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 7
    (8, TType.STRUCT, 'privileges', [PrincipalPrivilegeSet, None], None, ),  # 8
    (9, TType.STRING, 'catName', 'UTF8', None, ),  # 9
)
all_structs.append(PartitionWithoutSD)
PartitionWithoutSD.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'values', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.I32, 'createTime', None, None, ),  # 2
    (3, TType.I32, 'lastAccessTime', None, None, ),  # 3
    (4, TType.STRING, 'relativePath', 'UTF8', None, ),  # 4
    (5, TType.MAP, 'parameters', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 5
    (6, TType.STRUCT, 'privileges', [PrincipalPrivilegeSet, None], None, ),  # 6
)
all_structs.append(PartitionSpecWithSharedSD)
PartitionSpecWithSharedSD.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'partitions', (TType.STRUCT, [PartitionWithoutSD, None], False), None, ),  # 1
    (2, TType.STRUCT, 'sd', [StorageDescriptor, None], None, ),  # 2
)
all_structs.append(PartitionListComposingSpec)
PartitionListComposingSpec.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'partitions', (TType.STRUCT, [Partition, None], False), None, ),  # 1
)
all_structs.append(PartitionSpec)
PartitionSpec.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'dbName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'tableName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'rootPath', 'UTF8', None, ),  # 3
    (4, TType.STRUCT, 'sharedSDPartitionSpec', [PartitionSpecWithSharedSD, None], None, ),  # 4
    (5, TType.STRUCT, 'partitionList', [PartitionListComposingSpec, None], None, ),  # 5
    (6, TType.STRING, 'catName', 'UTF8', None, ),  # 6
)
all_structs.append(BooleanColumnStatsData)
BooleanColumnStatsData.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'numTrues', None, None, ),  # 1
    (2, TType.I64, 'numFalses', None, None, ),  # 2
    (3, TType.I64, 'numNulls', None, None, ),  # 3
    (4, TType.STRING, 'bitVectors', 'BINARY', None, ),  # 4
)
all_structs.append(DoubleColumnStatsData)
DoubleColumnStatsData.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'lowValue', None, None, ),  # 1
    (2, TType.DOUBLE, 'highValue', None, None, ),  # 2
    (3, TType.I64, 'numNulls', None, None, ),  # 3
    (4, TType.I64, 'numDVs', None, None, ),  # 4
    (5, TType.STRING, 'bitVectors', 'BINARY', None, ),  # 5
)
all_structs.append(LongColumnStatsData)
LongColumnStatsData.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'lowValue', None, None, ),  # 1
    (2, TType.I64, 'highValue', None, None, ),  # 2
    (3, TType.I64, 'numNulls', None, None, ),  # 3
    (4, TType.I64, 'numDVs', None, None, ),  # 4
    (5, TType.STRING, 'bitVectors', 'BINARY', None, ),  # 5
)
all_structs.append(StringColumnStatsData)
StringColumnStatsData.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'maxColLen', None, None, ),  # 1
    (2, TType.DOUBLE, 'avgColLen', None, None, ),  # 2
    (3, TType.I64, 'numNulls', None, None, ),  # 3
    (4, TType.I64, 'numDVs', None, None, ),  # 4
    (5, TType.STRING, 'bitVectors', 'BINARY', None, ),  # 5
)
all_structs.append(BinaryColumnStatsData)
BinaryColumnStatsData.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'maxColLen', None, None, ),  # 1
    (2, TType.DOUBLE, 'avgColLen', None, None, ),  # 2
    (3, TType.I64, 'numNulls', None, None, ),  # 3
    (4, TType.STRING, 'bitVectors', 'BINARY', None, ),  # 4
)
all_structs.append(Decimal)
Decimal.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'unscaled', 'BINARY', None, ),  # 1
    None,  # 2
    (3, TType.I16, 'scale', None, None, ),  # 3
)
all_structs.append(DecimalColumnStatsData)
DecimalColumnStatsData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'lowValue', [Decimal, None], None, ),  # 1
    (2, TType.STRUCT, 'highValue', [Decimal, None], None, ),  # 2
    (3, TType.I64, 'numNulls', None, None, ),  # 3
    (4, TType.I64, 'numDVs', None, None, ),  # 4
    (5, TType.STRING, 'bitVectors', 'BINARY', None, ),  # 5
)
all_structs.append(Date)
Date.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'daysSinceEpoch', None, None, ),  # 1
)
all_structs.append(DateColumnStatsData)
DateColumnStatsData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'lowValue', [Date, None], None, ),  # 1
    (2, TType.STRUCT, 'highValue', [Date, None], None, ),  # 2
    (3, TType.I64, 'numNulls', None, None, ),  # 3
    (4, TType.I64, 'numDVs', None, None, ),  # 4
    (5, TType.STRING, 'bitVectors', 'BINARY', None, ),  # 5
)
all_structs.append(ColumnStatisticsData)
ColumnStatisticsData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'booleanStats', [BooleanColumnStatsData, None], None, ),  # 1
    (2, TType.STRUCT, 'longStats', [LongColumnStatsData, None], None, ),  # 2
    (3, TType.STRUCT, 'doubleStats', [DoubleColumnStatsData, None], None, ),  # 3
    (4, TType.STRUCT, 'stringStats', [StringColumnStatsData, None], None, ),  # 4
    (5, TType.STRUCT, 'binaryStats', [BinaryColumnStatsData, None], None, ),  # 5
    (6, TType.STRUCT, 'decimalStats', [DecimalColumnStatsData, None], None, ),  # 6
    (7, TType.STRUCT, 'dateStats', [DateColumnStatsData, None], None, ),  # 7
)
all_structs.append(ColumnStatisticsObj)
ColumnStatisticsObj.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'colName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'colType', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'statsData', [ColumnStatisticsData, None], None, ),  # 3
)
all_structs.append(ColumnStatisticsDesc)
ColumnStatisticsDesc.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'isTblLevel', None, None, ),  # 1
    (2, TType.STRING, 'dbName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'tableName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'partName', 'UTF8', None, ),  # 4
    (5, TType.I64, 'lastAnalyzed', None, None, ),  # 5
    (6, TType.STRING, 'catName', 'UTF8', None, ),  # 6
)
all_structs.append(ColumnStatistics)
ColumnStatistics.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'statsDesc', [ColumnStatisticsDesc, None], None, ),  # 1
    (2, TType.LIST, 'statsObj', (TType.STRUCT, [ColumnStatisticsObj, None], False), None, ),  # 2
)
all_structs.append(AggrStats)
AggrStats.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'colStats', (TType.STRUCT, [ColumnStatisticsObj, None], False), None, ),  # 1
    (2, TType.I64, 'partsFound', None, None, ),  # 2
)
all_structs.append(SetPartitionsStatsRequest)
SetPartitionsStatsRequest.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'colStats', (TType.STRUCT, [ColumnStatistics, None], False), None, ),  # 1
    (2, TType.BOOL, 'needMerge', None, None, ),  # 2
)
all_structs.append(Schema)
Schema.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'fieldSchemas', (TType.STRUCT, [FieldSchema, None], False), None, ),  # 1
    (2, TType.MAP, 'properties', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(EnvironmentContext)
EnvironmentContext.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'properties', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 1
)
all_structs.append(PrimaryKeysRequest)
PrimaryKeysRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'tbl_name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'catName', 'UTF8', None, ),  # 3
)
all_structs.append(PrimaryKeysResponse)
PrimaryKeysResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'primaryKeys', (TType.STRUCT, [SQLPrimaryKey, None], False), None, ),  # 1
)
all_structs.append(ForeignKeysRequest)
ForeignKeysRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'parent_db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'parent_tbl_name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'foreign_db_name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'foreign_tbl_name', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'catName', 'UTF8', None, ),  # 5
)
all_structs.append(ForeignKeysResponse)
ForeignKeysResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'foreignKeys', (TType.STRUCT, [SQLForeignKey, None], False), None, ),  # 1
)
all_structs.append(UniqueConstraintsRequest)
UniqueConstraintsRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'catName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'db_name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'tbl_name', 'UTF8', None, ),  # 3
)
all_structs.append(UniqueConstraintsResponse)
UniqueConstraintsResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'uniqueConstraints', (TType.STRUCT, [SQLUniqueConstraint, None], False), None, ),  # 1
)
all_structs.append(NotNullConstraintsRequest)
NotNullConstraintsRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'catName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'db_name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'tbl_name', 'UTF8', None, ),  # 3
)
all_structs.append(NotNullConstraintsResponse)
NotNullConstraintsResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'notNullConstraints', (TType.STRUCT, [SQLNotNullConstraint, None], False), None, ),  # 1
)
all_structs.append(DefaultConstraintsRequest)
DefaultConstraintsRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'catName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'db_name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'tbl_name', 'UTF8', None, ),  # 3
)
all_structs.append(DefaultConstraintsResponse)
DefaultConstraintsResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'defaultConstraints', (TType.STRUCT, [SQLDefaultConstraint, None], False), None, ),  # 1
)
all_structs.append(CheckConstraintsRequest)
CheckConstraintsRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'catName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'db_name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'tbl_name', 'UTF8', None, ),  # 3
)
all_structs.append(CheckConstraintsResponse)
CheckConstraintsResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'checkConstraints', (TType.STRUCT, [SQLCheckConstraint, None], False), None, ),  # 1
)
all_structs.append(DropConstraintRequest)
DropConstraintRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'dbname', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'tablename', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'constraintname', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'catName', 'UTF8', None, ),  # 4
)
all_structs.append(AddPrimaryKeyRequest)
AddPrimaryKeyRequest.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'primaryKeyCols', (TType.STRUCT, [SQLPrimaryKey, None], False), None, ),  # 1
)
all_structs.append(AddForeignKeyRequest)
AddForeignKeyRequest.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'foreignKeyCols', (TType.STRUCT, [SQLForeignKey, None], False), None, ),  # 1
)
all_structs.append(AddUniqueConstraintRequest)
AddUniqueConstraintRequest.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'uniqueConstraintCols', (TType.STRUCT, [SQLUniqueConstraint, None], False), None, ),  # 1
)
all_structs.append(AddNotNullConstraintRequest)
AddNotNullConstraintRequest.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'notNullConstraintCols', (TType.STRUCT, [SQLNotNullConstraint, None], False), None, ),  # 1
)
all_structs.append(AddDefaultConstraintRequest)
AddDefaultConstraintRequest.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'defaultConstraintCols', (TType.STRUCT, [SQLDefaultConstraint, None], False), None, ),  # 1
)
all_structs.append(AddCheckConstraintRequest)
AddCheckConstraintRequest.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'checkConstraintCols', (TType.STRUCT, [SQLCheckConstraint, None], False), None, ),  # 1
)
all_structs.append(PartitionsByExprResult)
PartitionsByExprResult.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'partitions', (TType.STRUCT, [Partition, None], False), None, ),  # 1
    (2, TType.BOOL, 'hasUnknownPartitions', None, None, ),  # 2
)
all_structs.append(PartitionsByExprRequest)
PartitionsByExprRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'dbName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'tblName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'expr', 'BINARY', None, ),  # 3
    (4, TType.STRING, 'defaultPartitionName', 'UTF8', None, ),  # 4
    (5, TType.I16, 'maxParts', None, -1, ),  # 5
    (6, TType.STRING, 'catName', 'UTF8', None, ),  # 6
)
all_structs.append(TableStatsResult)
TableStatsResult.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'tableStats', (TType.STRUCT, [ColumnStatisticsObj, None], False), None, ),  # 1
)
all_structs.append(PartitionsStatsResult)
PartitionsStatsResult.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'partStats', (TType.STRING, 'UTF8', TType.LIST, (TType.STRUCT, [ColumnStatisticsObj, None], False), False), None, ),  # 1
)
all_structs.append(TableStatsRequest)
TableStatsRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'dbName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'tblName', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'colNames', (TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.STRING, 'catName', 'UTF8', None, ),  # 4
)
all_structs.append(PartitionsStatsRequest)
PartitionsStatsRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'dbName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'tblName', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'colNames', (TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.LIST, 'partNames', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.STRING, 'catName', 'UTF8', None, ),  # 5
)
all_structs.append(AddPartitionsResult)
AddPartitionsResult.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'partitions', (TType.STRUCT, [Partition, None], False), None, ),  # 1
)
all_structs.append(AddPartitionsRequest)
AddPartitionsRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'dbName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'tblName', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'parts', (TType.STRUCT, [Partition, None], False), None, ),  # 3
    (4, TType.BOOL, 'ifNotExists', None, None, ),  # 4
    (5, TType.BOOL, 'needResult', None, True, ),  # 5
    (6, TType.STRING, 'catName', 'UTF8', None, ),  # 6
)
all_structs.append(DropPartitionsResult)
DropPartitionsResult.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'partitions', (TType.STRUCT, [Partition, None], False), None, ),  # 1
)
all_structs.append(DropPartitionsExpr)
DropPartitionsExpr.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'expr', 'BINARY', None, ),  # 1
    (2, TType.I32, 'partArchiveLevel', None, None, ),  # 2
)
all_structs.append(RequestPartsSpec)
RequestPartsSpec.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'names', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.LIST, 'exprs', (TType.STRUCT, [DropPartitionsExpr, None], False), None, ),  # 2
)
all_structs.append(DropPartitionsRequest)
DropPartitionsRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'dbName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'tblName', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'parts', [RequestPartsSpec, None], None, ),  # 3
    (4, TType.BOOL, 'deleteData', None, None, ),  # 4
    (5, TType.BOOL, 'ifExists', None, True, ),  # 5
    (6, TType.BOOL, 'ignoreProtection', None, None, ),  # 6
    (7, TType.STRUCT, 'environmentContext', [EnvironmentContext, None], None, ),  # 7
    (8, TType.BOOL, 'needResult', None, True, ),  # 8
    (9, TType.STRING, 'catName', 'UTF8', None, ),  # 9
)
all_structs.append(PartitionValuesRequest)
PartitionValuesRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'dbName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'tblName', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'partitionKeys', (TType.STRUCT, [FieldSchema, None], False), None, ),  # 3
    (4, TType.BOOL, 'applyDistinct', None, True, ),  # 4
    (5, TType.STRING, 'filter', 'UTF8', None, ),  # 5
    (6, TType.LIST, 'partitionOrder', (TType.STRUCT, [FieldSchema, None], False), None, ),  # 6
    (7, TType.BOOL, 'ascending', None, True, ),  # 7
    (8, TType.I64, 'maxParts', None, -1, ),  # 8
    (9, TType.STRING, 'catName', 'UTF8', None, ),  # 9
)
all_structs.append(PartitionValuesRow)
PartitionValuesRow.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'row', (TType.STRING, 'UTF8', False), None, ),  # 1
)
all_structs.append(PartitionValuesResponse)
PartitionValuesResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'partitionValues', (TType.STRUCT, [PartitionValuesRow, None], False), None, ),  # 1
)
all_structs.append(ResourceUri)
ResourceUri.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'resourceType', None, None, ),  # 1
    (2, TType.STRING, 'uri', 'UTF8', None, ),  # 2
)
all_structs.append(Function)
Function.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'functionName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'dbName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'className', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'ownerName', 'UTF8', None, ),  # 4
    (5, TType.I32, 'ownerType', None, None, ),  # 5
    (6, TType.I32, 'createTime', None, None, ),  # 6
    (7, TType.I32, 'functionType', None, None, ),  # 7
    (8, TType.LIST, 'resourceUris', (TType.STRUCT, [ResourceUri, None], False), None, ),  # 8
    (9, TType.STRING, 'catName', 'UTF8', None, ),  # 9
)
all_structs.append(TxnInfo)
TxnInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'id', None, None, ),  # 1
    (2, TType.I32, 'state', None, None, ),  # 2
    (3, TType.STRING, 'user', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'hostname', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'agentInfo', 'UTF8', "Unknown", ),  # 5
    (6, TType.I32, 'heartbeatCount', None, 0, ),  # 6
    (7, TType.STRING, 'metaInfo', 'UTF8', None, ),  # 7
    (8, TType.I64, 'startedTime', None, None, ),  # 8
    (9, TType.I64, 'lastHeartbeatTime', None, None, ),  # 9
)
all_structs.append(GetOpenTxnsInfoResponse)
GetOpenTxnsInfoResponse.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'txn_high_water_mark', None, None, ),  # 1
    (2, TType.LIST, 'open_txns', (TType.STRUCT, [TxnInfo, None], False), None, ),  # 2
)
all_structs.append(GetOpenTxnsResponse)
GetOpenTxnsResponse.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'txn_high_water_mark', None, None, ),  # 1
    (2, TType.LIST, 'open_txns', (TType.I64, None, False), None, ),  # 2
    (3, TType.I64, 'min_open_txn', None, None, ),  # 3
    (4, TType.STRING, 'abortedBits', 'BINARY', None, ),  # 4
)
all_structs.append(OpenTxnRequest)
OpenTxnRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'num_txns', None, None, ),  # 1
    (2, TType.STRING, 'user', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'hostname', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'agentInfo', 'UTF8', "Unknown", ),  # 4
    (5, TType.STRING, 'replPolicy', 'UTF8', None, ),  # 5
    (6, TType.LIST, 'replSrcTxnIds', (TType.I64, None, False), None, ),  # 6
)
all_structs.append(OpenTxnsResponse)
OpenTxnsResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'txn_ids', (TType.I64, None, False), None, ),  # 1
)
all_structs.append(AbortTxnRequest)
AbortTxnRequest.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'txnid', None, None, ),  # 1
    (2, TType.STRING, 'replPolicy', 'UTF8', None, ),  # 2
)
all_structs.append(AbortTxnsRequest)
AbortTxnsRequest.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'txn_ids', (TType.I64, None, False), None, ),  # 1
)
all_structs.append(CommitTxnRequest)
CommitTxnRequest.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'txnid', None, None, ),  # 1
    (2, TType.STRING, 'replPolicy', 'UTF8', None, ),  # 2
)
all_structs.append(ReplTblWriteIdStateRequest)
ReplTblWriteIdStateRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'validWriteIdlist', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'user', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'hostName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'dbName', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'tableName', 'UTF8', None, ),  # 5
    (6, TType.LIST, 'partNames', (TType.STRING, 'UTF8', False), None, ),  # 6
)
all_structs.append(GetValidWriteIdsRequest)
GetValidWriteIdsRequest.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'fullTableNames', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.STRING, 'validTxnList', 'UTF8', None, ),  # 2
)
all_structs.append(TableValidWriteIds)
TableValidWriteIds.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'fullTableName', 'UTF8', None, ),  # 1
    (2, TType.I64, 'writeIdHighWaterMark', None, None, ),  # 2
    (3, TType.LIST, 'invalidWriteIds', (TType.I64, None, False), None, ),  # 3
    (4, TType.I64, 'minOpenWriteId', None, None, ),  # 4
    (5, TType.STRING, 'abortedBits', 'BINARY', None, ),  # 5
)
all_structs.append(GetValidWriteIdsResponse)
GetValidWriteIdsResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'tblValidWriteIds', (TType.STRUCT, [TableValidWriteIds, None], False), None, ),  # 1
)
all_structs.append(AllocateTableWriteIdsRequest)
AllocateTableWriteIdsRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'dbName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'tableName', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'txnIds', (TType.I64, None, False), None, ),  # 3
    (4, TType.STRING, 'replPolicy', 'UTF8', None, ),  # 4
    (5, TType.LIST, 'srcTxnToWriteIdList', (TType.STRUCT, [TxnToWriteId, None], False), None, ),  # 5
)
all_structs.append(TxnToWriteId)
TxnToWriteId.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'txnId', None, None, ),  # 1
    (2, TType.I64, 'writeId', None, None, ),  # 2
)
all_structs.append(AllocateTableWriteIdsResponse)
AllocateTableWriteIdsResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'txnToWriteIds', (TType.STRUCT, [TxnToWriteId, None], False), None, ),  # 1
)
all_structs.append(LockComponent)
LockComponent.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'type', None, None, ),  # 1
    (2, TType.I32, 'level', None, None, ),  # 2
    (3, TType.STRING, 'dbname', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'tablename', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'partitionname', 'UTF8', None, ),  # 5
    (6, TType.I32, 'operationType', None, 5, ),  # 6
    (7, TType.BOOL, 'isTransactional', None, False, ),  # 7
    (8, TType.BOOL, 'isDynamicPartitionWrite', None, False, ),  # 8
)
all_structs.append(LockRequest)
LockRequest.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'component', (TType.STRUCT, [LockComponent, None], False), None, ),  # 1
    (2, TType.I64, 'txnid', None, None, ),  # 2
    (3, TType.STRING, 'user', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'hostname', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'agentInfo', 'UTF8', "Unknown", ),  # 5
)
all_structs.append(LockResponse)
LockResponse.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'lockid', None, None, ),  # 1
    (2, TType.I32, 'state', None, None, ),  # 2
)
all_structs.append(CheckLockRequest)
CheckLockRequest.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'lockid', None, None, ),  # 1
    (2, TType.I64, 'txnid', None, None, ),  # 2
    (3, TType.I64, 'elapsed_ms', None, None, ),  # 3
)
all_structs.append(UnlockRequest)
UnlockRequest.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'lockid', None, None, ),  # 1
)
all_structs.append(ShowLocksRequest)
ShowLocksRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'dbname', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'tablename', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'partname', 'UTF8', None, ),  # 3
    (4, TType.BOOL, 'isExtended', None, False, ),  # 4
)
all_structs.append(ShowLocksResponseElement)
ShowLocksResponseElement.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'lockid', None, None, ),  # 1
    (2, TType.STRING, 'dbname', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'tablename', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'partname', 'UTF8', None, ),  # 4
    (5, TType.I32, 'state', None, None, ),  # 5
    (6, TType.I32, 'type', None, None, ),  # 6
    (7, TType.I64, 'txnid', None, None, ),  # 7
    (8, TType.I64, 'lastheartbeat', None, None, ),  # 8
    (9, TType.I64, 'acquiredat', None, None, ),  # 9
    (10, TType.STRING, 'user', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'hostname', 'UTF8', None, ),  # 11
    (12, TType.I32, 'heartbeatCount', None, 0, ),  # 12
    (13, TType.STRING, 'agentInfo', 'UTF8', None, ),  # 13
    (14, TType.I64, 'blockedByExtId', None, None, ),  # 14
    (15, TType.I64, 'blockedByIntId', None, None, ),  # 15
    (16, TType.I64, 'lockIdInternal', None, None, ),  # 16
)
all_structs.append(ShowLocksResponse)
ShowLocksResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'locks', (TType.STRUCT, [ShowLocksResponseElement, None], False), None, ),  # 1
)
all_structs.append(HeartbeatRequest)
HeartbeatRequest.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'lockid', None, None, ),  # 1
    (2, TType.I64, 'txnid', None, None, ),  # 2
)
all_structs.append(HeartbeatTxnRangeRequest)
HeartbeatTxnRangeRequest.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'min', None, None, ),  # 1
    (2, TType.I64, 'max', None, None, ),  # 2
)
all_structs.append(HeartbeatTxnRangeResponse)
HeartbeatTxnRangeResponse.thrift_spec = (
    None,  # 0
    (1, TType.SET, 'aborted', (TType.I64, None, False), None, ),  # 1
    (2, TType.SET, 'nosuch', (TType.I64, None, False), None, ),  # 2
)
all_structs.append(CompactionRequest)
CompactionRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'dbname', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'tablename', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'partitionname', 'UTF8', None, ),  # 3
    (4, TType.I32, 'type', None, None, ),  # 4
    (5, TType.STRING, 'runas', 'UTF8', None, ),  # 5
    (6, TType.MAP, 'properties', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 6
)
all_structs.append(CompactionResponse)
CompactionResponse.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'id', None, None, ),  # 1
    (2, TType.STRING, 'state', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'accepted', None, None, ),  # 3
)
all_structs.append(ShowCompactRequest)
ShowCompactRequest.thrift_spec = (
)
all_structs.append(ShowCompactResponseElement)
ShowCompactResponseElement.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'dbname', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'tablename', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'partitionname', 'UTF8', None, ),  # 3
    (4, TType.I32, 'type', None, None, ),  # 4
    (5, TType.STRING, 'state', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'workerid', 'UTF8', None, ),  # 6
    (7, TType.I64, 'start', None, None, ),  # 7
    (8, TType.STRING, 'runAs', 'UTF8', None, ),  # 8
    (9, TType.I64, 'hightestTxnId', None, None, ),  # 9
    (10, TType.STRING, 'metaInfo', 'UTF8', None, ),  # 10
    (11, TType.I64, 'endTime', None, None, ),  # 11
    (12, TType.STRING, 'hadoopJobId', 'UTF8', "None", ),  # 12
    (13, TType.I64, 'id', None, None, ),  # 13
)
all_structs.append(ShowCompactResponse)
ShowCompactResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'compacts', (TType.STRUCT, [ShowCompactResponseElement, None], False), None, ),  # 1
)
all_structs.append(AddDynamicPartitions)
AddDynamicPartitions.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'txnid', None, None, ),  # 1
    (2, TType.I64, 'writeid', None, None, ),  # 2
    (3, TType.STRING, 'dbname', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'tablename', 'UTF8', None, ),  # 4
    (5, TType.LIST, 'partitionnames', (TType.STRING, 'UTF8', False), None, ),  # 5
    (6, TType.I32, 'operationType', None, 5, ),  # 6
)
all_structs.append(BasicTxnInfo)
BasicTxnInfo.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'isnull', None, None, ),  # 1
    (2, TType.I64, 'time', None, None, ),  # 2
    (3, TType.I64, 'txnid', None, None, ),  # 3
    (4, TType.STRING, 'dbname', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'tablename', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'partitionname', 'UTF8', None, ),  # 6
)
all_structs.append(CreationMetadata)
CreationMetadata.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'catName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'dbName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'tblName', 'UTF8', None, ),  # 3
    (4, TType.SET, 'tablesUsed', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.STRING, 'validTxnList', 'UTF8', None, ),  # 5
    (6, TType.I64, 'materializationTime', None, None, ),  # 6
)
all_structs.append(NotificationEventRequest)
NotificationEventRequest.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'lastEvent', None, None, ),  # 1
    (2, TType.I32, 'maxEvents', None, None, ),  # 2
)
all_structs.append(NotificationEvent)
NotificationEvent.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'eventId', None, None, ),  # 1
    (2, TType.I32, 'eventTime', None, None, ),  # 2
    (3, TType.STRING, 'eventType', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'dbName', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'tableName', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'message', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'messageFormat', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'catName', 'UTF8', None, ),  # 8
)
all_structs.append(NotificationEventResponse)
NotificationEventResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'events', (TType.STRUCT, [NotificationEvent, None], False), None, ),  # 1
)
all_structs.append(CurrentNotificationEventId)
CurrentNotificationEventId.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'eventId', None, None, ),  # 1
)
all_structs.append(NotificationEventsCountRequest)
NotificationEventsCountRequest.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'fromEventId', None, None, ),  # 1
    (2, TType.STRING, 'dbName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'catName', 'UTF8', None, ),  # 3
)
all_structs.append(NotificationEventsCountResponse)
NotificationEventsCountResponse.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'eventsCount', None, None, ),  # 1
)
all_structs.append(InsertEventRequestData)
InsertEventRequestData.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'replace', None, None, ),  # 1
    (2, TType.LIST, 'filesAdded', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.LIST, 'filesAddedChecksum', (TType.STRING, 'UTF8', False), None, ),  # 3
)
all_structs.append(FireEventRequestData)
FireEventRequestData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'insertData', [InsertEventRequestData, None], None, ),  # 1
)
all_structs.append(FireEventRequest)
FireEventRequest.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'successful', None, None, ),  # 1
    (2, TType.STRUCT, 'data', [FireEventRequestData, None], None, ),  # 2
    (3, TType.STRING, 'dbName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'tableName', 'UTF8', None, ),  # 4
    (5, TType.LIST, 'partitionVals', (TType.STRING, 'UTF8', False), None, ),  # 5
    (6, TType.STRING, 'catName', 'UTF8', None, ),  # 6
)
all_structs.append(FireEventResponse)
FireEventResponse.thrift_spec = (
)
all_structs.append(MetadataPpdResult)
MetadataPpdResult.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'metadata', 'BINARY', None, ),  # 1
    (2, TType.STRING, 'includeBitset', 'BINARY', None, ),  # 2
)
all_structs.append(GetFileMetadataByExprResult)
GetFileMetadataByExprResult.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'metadata', (TType.I64, None, TType.STRUCT, [MetadataPpdResult, None], False), None, ),  # 1
    (2, TType.BOOL, 'isSupported', None, None, ),  # 2
)
all_structs.append(GetFileMetadataByExprRequest)
GetFileMetadataByExprRequest.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'fileIds', (TType.I64, None, False), None, ),  # 1
    (2, TType.STRING, 'expr', 'BINARY', None, ),  # 2
    (3, TType.BOOL, 'doGetFooters', None, None, ),  # 3
    (4, TType.I32, 'type', None, None, ),  # 4
)
all_structs.append(GetFileMetadataResult)
GetFileMetadataResult.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'metadata', (TType.I64, None, TType.STRING, 'BINARY', False), None, ),  # 1
    (2, TType.BOOL, 'isSupported', None, None, ),  # 2
)
all_structs.append(GetFileMetadataRequest)
GetFileMetadataRequest.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'fileIds', (TType.I64, None, False), None, ),  # 1
)
all_structs.append(PutFileMetadataResult)
PutFileMetadataResult.thrift_spec = (
)
all_structs.append(PutFileMetadataRequest)
PutFileMetadataRequest.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'fileIds', (TType.I64, None, False), None, ),  # 1
    (2, TType.LIST, 'metadata', (TType.STRING, 'BINARY', False), None, ),  # 2
    (3, TType.I32, 'type', None, None, ),  # 3
)
all_structs.append(ClearFileMetadataResult)
ClearFileMetadataResult.thrift_spec = (
)
all_structs.append(ClearFileMetadataRequest)
ClearFileMetadataRequest.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'fileIds', (TType.I64, None, False), None, ),  # 1
)
all_structs.append(CacheFileMetadataResult)
CacheFileMetadataResult.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'isSupported', None, None, ),  # 1
)
all_structs.append(CacheFileMetadataRequest)
CacheFileMetadataRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'dbName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'tblName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'partName', 'UTF8', None, ),  # 3
    (4, TType.BOOL, 'isAllParts', None, None, ),  # 4
)
all_structs.append(GetAllFunctionsResponse)
GetAllFunctionsResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'functions', (TType.STRUCT, [Function, None], False), None, ),  # 1
)
all_structs.append(ClientCapabilities)
ClientCapabilities.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'values', (TType.I32, None, False), None, ),  # 1
)
all_structs.append(GetTableRequest)
GetTableRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'dbName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'tblName', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'capabilities', [ClientCapabilities, None], None, ),  # 3
    (4, TType.STRING, 'catName', 'UTF8', None, ),  # 4
)
all_structs.append(GetTableResult)
GetTableResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'table', [Table, None], None, ),  # 1
)
all_structs.append(GetTablesRequest)
GetTablesRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'dbName', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'tblNames', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.STRUCT, 'capabilities', [ClientCapabilities, None], None, ),  # 3
    (4, TType.STRING, 'catName', 'UTF8', None, ),  # 4
)
all_structs.append(GetTablesResult)
GetTablesResult.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'tables', (TType.STRUCT, [Table, None], False), None, ),  # 1
)
all_structs.append(CmRecycleRequest)
CmRecycleRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'dataPath', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'purge', None, None, ),  # 2
)
all_structs.append(CmRecycleResponse)
CmRecycleResponse.thrift_spec = (
)
all_structs.append(TableMeta)
TableMeta.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'dbName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'tableName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'tableType', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'comments', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'catName', 'UTF8', None, ),  # 5
)
all_structs.append(Materialization)
Materialization.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'sourceTablesUpdateDeleteModified', None, None, ),  # 1
)
all_structs.append(WMResourcePlan)
WMResourcePlan.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.I32, 'queryParallelism', None, None, ),  # 3
    (4, TType.STRING, 'defaultPoolPath', 'UTF8', None, ),  # 4
)
all_structs.append(WMNullableResourcePlan)
WMNullableResourcePlan.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    None,  # 3
    (4, TType.I32, 'queryParallelism', None, None, ),  # 4
    (5, TType.BOOL, 'isSetQueryParallelism', None, None, ),  # 5
    (6, TType.STRING, 'defaultPoolPath', 'UTF8', None, ),  # 6
    (7, TType.BOOL, 'isSetDefaultPoolPath', None, None, ),  # 7
)
all_structs.append(WMPool)
WMPool.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'resourcePlanName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'poolPath', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'allocFraction', None, None, ),  # 3
    (4, TType.I32, 'queryParallelism', None, None, ),  # 4
    (5, TType.STRING, 'schedulingPolicy', 'UTF8', None, ),  # 5
)
all_structs.append(WMNullablePool)
WMNullablePool.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'resourcePlanName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'poolPath', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'allocFraction', None, None, ),  # 3
    (4, TType.I32, 'queryParallelism', None, None, ),  # 4
    (5, TType.STRING, 'schedulingPolicy', 'UTF8', None, ),  # 5
    (6, TType.BOOL, 'isSetSchedulingPolicy', None, None, ),  # 6
)
all_structs.append(WMTrigger)
WMTrigger.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'resourcePlanName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'triggerName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'triggerExpression', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'actionExpression', 'UTF8', None, ),  # 4
    (5, TType.BOOL, 'isInUnmanaged', None, None, ),  # 5
)
all_structs.append(WMMapping)
WMMapping.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'resourcePlanName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'entityType', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'entityName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'poolPath', 'UTF8', None, ),  # 4
    (5, TType.I32, 'ordering', None, None, ),  # 5
)
all_structs.append(WMPoolTrigger)
WMPoolTrigger.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'pool', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'trigger', 'UTF8', None, ),  # 2
)
all_structs.append(WMFullResourcePlan)
WMFullResourcePlan.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'plan', [WMResourcePlan, None], None, ),  # 1
    (2, TType.LIST, 'pools', (TType.STRUCT, [WMPool, None], False), None, ),  # 2
    (3, TType.LIST, 'mappings', (TType.STRUCT, [WMMapping, None], False), None, ),  # 3
    (4, TType.LIST, 'triggers', (TType.STRUCT, [WMTrigger, None], False), None, ),  # 4
    (5, TType.LIST, 'poolTriggers', (TType.STRUCT, [WMPoolTrigger, None], False), None, ),  # 5
)
all_structs.append(WMCreateResourcePlanRequest)
WMCreateResourcePlanRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'resourcePlan', [WMResourcePlan, None], None, ),  # 1
    (2, TType.STRING, 'copyFrom', 'UTF8', None, ),  # 2
)
all_structs.append(WMCreateResourcePlanResponse)
WMCreateResourcePlanResponse.thrift_spec = (
)
all_structs.append(WMGetActiveResourcePlanRequest)
WMGetActiveResourcePlanRequest.thrift_spec = (
)
all_structs.append(WMGetActiveResourcePlanResponse)
WMGetActiveResourcePlanResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'resourcePlan', [WMFullResourcePlan, None], None, ),  # 1
)
all_structs.append(WMGetResourcePlanRequest)
WMGetResourcePlanRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'resourcePlanName', 'UTF8', None, ),  # 1
)
all_structs.append(WMGetResourcePlanResponse)
WMGetResourcePlanResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'resourcePlan', [WMFullResourcePlan, None], None, ),  # 1
)
all_structs.append(WMGetAllResourcePlanRequest)
WMGetAllResourcePlanRequest.thrift_spec = (
)
all_structs.append(WMGetAllResourcePlanResponse)
WMGetAllResourcePlanResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'resourcePlans', (TType.STRUCT, [WMResourcePlan, None], False), None, ),  # 1
)
all_structs.append(WMAlterResourcePlanRequest)
WMAlterResourcePlanRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'resourcePlanName', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'resourcePlan', [WMNullableResourcePlan, None], None, ),  # 2
    (3, TType.BOOL, 'isEnableAndActivate', None, None, ),  # 3
    (4, TType.BOOL, 'isForceDeactivate', None, None, ),  # 4
    (5, TType.BOOL, 'isReplace', None, None, ),  # 5
)
all_structs.append(WMAlterResourcePlanResponse)
WMAlterResourcePlanResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'fullResourcePlan', [WMFullResourcePlan, None], None, ),  # 1
)
all_structs.append(WMValidateResourcePlanRequest)
WMValidateResourcePlanRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'resourcePlanName', 'UTF8', None, ),  # 1
)
all_structs.append(WMValidateResourcePlanResponse)
WMValidateResourcePlanResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'errors', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.LIST, 'warnings', (TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(WMDropResourcePlanRequest)
WMDropResourcePlanRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'resourcePlanName', 'UTF8', None, ),  # 1
)
all_structs.append(WMDropResourcePlanResponse)
WMDropResourcePlanResponse.thrift_spec = (
)
all_structs.append(WMCreateTriggerRequest)
WMCreateTriggerRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'trigger', [WMTrigger, None], None, ),  # 1
)
all_structs.append(WMCreateTriggerResponse)
WMCreateTriggerResponse.thrift_spec = (
)
all_structs.append(WMAlterTriggerRequest)
WMAlterTriggerRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'trigger', [WMTrigger, None], None, ),  # 1
)
all_structs.append(WMAlterTriggerResponse)
WMAlterTriggerResponse.thrift_spec = (
)
all_structs.append(WMDropTriggerRequest)
WMDropTriggerRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'resourcePlanName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'triggerName', 'UTF8', None, ),  # 2
)
all_structs.append(WMDropTriggerResponse)
WMDropTriggerResponse.thrift_spec = (
)
all_structs.append(WMGetTriggersForResourePlanRequest)
WMGetTriggersForResourePlanRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'resourcePlanName', 'UTF8', None, ),  # 1
)
all_structs.append(WMGetTriggersForResourePlanResponse)
WMGetTriggersForResourePlanResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'triggers', (TType.STRUCT, [WMTrigger, None], False), None, ),  # 1
)
all_structs.append(WMCreatePoolRequest)
WMCreatePoolRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'pool', [WMPool, None], None, ),  # 1
)
all_structs.append(WMCreatePoolResponse)
WMCreatePoolResponse.thrift_spec = (
)
all_structs.append(WMAlterPoolRequest)
WMAlterPoolRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'pool', [WMNullablePool, None], None, ),  # 1
    (2, TType.STRING, 'poolPath', 'UTF8', None, ),  # 2
)
all_structs.append(WMAlterPoolResponse)
WMAlterPoolResponse.thrift_spec = (
)
all_structs.append(WMDropPoolRequest)
WMDropPoolRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'resourcePlanName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'poolPath', 'UTF8', None, ),  # 2
)
all_structs.append(WMDropPoolResponse)
WMDropPoolResponse.thrift_spec = (
)
all_structs.append(WMCreateOrUpdateMappingRequest)
WMCreateOrUpdateMappingRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'mapping', [WMMapping, None], None, ),  # 1
    (2, TType.BOOL, 'update', None, None, ),  # 2
)
all_structs.append(WMCreateOrUpdateMappingResponse)
WMCreateOrUpdateMappingResponse.thrift_spec = (
)
all_structs.append(WMDropMappingRequest)
WMDropMappingRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'mapping', [WMMapping, None], None, ),  # 1
)
all_structs.append(WMDropMappingResponse)
WMDropMappingResponse.thrift_spec = (
)
all_structs.append(WMCreateOrDropTriggerToPoolMappingRequest)
WMCreateOrDropTriggerToPoolMappingRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'resourcePlanName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'triggerName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'poolPath', 'UTF8', None, ),  # 3
    (4, TType.BOOL, 'drop', None, None, ),  # 4
)
all_structs.append(WMCreateOrDropTriggerToPoolMappingResponse)
WMCreateOrDropTriggerToPoolMappingResponse.thrift_spec = (
)
all_structs.append(ISchema)
ISchema.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'schemaType', None, None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'catName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'dbName', 'UTF8', None, ),  # 4
    (5, TType.I32, 'compatibility', None, None, ),  # 5
    (6, TType.I32, 'validationLevel', None, None, ),  # 6
    (7, TType.BOOL, 'canEvolve', None, None, ),  # 7
    (8, TType.STRING, 'schemaGroup', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'description', 'UTF8', None, ),  # 9
)
all_structs.append(ISchemaName)
ISchemaName.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'catName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'dbName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'schemaName', 'UTF8', None, ),  # 3
)
all_structs.append(AlterISchemaRequest)
AlterISchemaRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'name', [ISchemaName, None], None, ),  # 1
    None,  # 2
    (3, TType.STRUCT, 'newSchema', [ISchema, None], None, ),  # 3
)
all_structs.append(SchemaVersion)
SchemaVersion.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'schema', [ISchemaName, None], None, ),  # 1
    (2, TType.I32, 'version', None, None, ),  # 2
    (3, TType.I64, 'createdAt', None, None, ),  # 3
    (4, TType.LIST, 'cols', (TType.STRUCT, [FieldSchema, None], False), None, ),  # 4
    (5, TType.I32, 'state', None, None, ),  # 5
    (6, TType.STRING, 'description', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'schemaText', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'fingerprint', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'name', 'UTF8', None, ),  # 9
    (10, TType.STRUCT, 'serDe', [SerDeInfo, None], None, ),  # 10
)
all_structs.append(SchemaVersionDescriptor)
SchemaVersionDescriptor.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'schema', [ISchemaName, None], None, ),  # 1
    (2, TType.I32, 'version', None, None, ),  # 2
)
all_structs.append(FindSchemasByColsRqst)
FindSchemasByColsRqst.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'colName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'colNamespace', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'type', 'UTF8', None, ),  # 3
)
all_structs.append(FindSchemasByColsResp)
FindSchemasByColsResp.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'schemaVersions', (TType.STRUCT, [SchemaVersionDescriptor, None], False), None, ),  # 1
)
all_structs.append(MapSchemaVersionToSerdeRequest)
MapSchemaVersionToSerdeRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'schemaVersion', [SchemaVersionDescriptor, None], None, ),  # 1
    (2, TType.STRING, 'serdeName', 'UTF8', None, ),  # 2
)
all_structs.append(SetSchemaVersionStateRequest)
SetSchemaVersionStateRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'schemaVersion', [SchemaVersionDescriptor, None], None, ),  # 1
    (2, TType.I32, 'state', None, None, ),  # 2
)
all_structs.append(GetSerdeRequest)
GetSerdeRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'serdeName', 'UTF8', None, ),  # 1
)
all_structs.append(RuntimeStat)
RuntimeStat.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'createTime', None, None, ),  # 1
    (2, TType.I32, 'weight', None, None, ),  # 2
    (3, TType.STRING, 'payload', 'BINARY', None, ),  # 3
)
all_structs.append(GetRuntimeStatsRequest)
GetRuntimeStatsRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'maxWeight', None, None, ),  # 1
    (2, TType.I32, 'maxCreateTime', None, None, ),  # 2
)
all_structs.append(MetaException)
MetaException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(UnknownTableException)
UnknownTableException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(UnknownDBException)
UnknownDBException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(AlreadyExistsException)
AlreadyExistsException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(InvalidPartitionException)
InvalidPartitionException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(UnknownPartitionException)
UnknownPartitionException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(InvalidObjectException)
InvalidObjectException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(NoSuchObjectException)
NoSuchObjectException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(InvalidOperationException)
InvalidOperationException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(ConfigValSecurityException)
ConfigValSecurityException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(InvalidInputException)
InvalidInputException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(NoSuchTxnException)
NoSuchTxnException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(TxnAbortedException)
TxnAbortedException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(TxnOpenException)
TxnOpenException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(NoSuchLockException)
NoSuchLockException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
fix_spec(all_structs)
del all_structs
